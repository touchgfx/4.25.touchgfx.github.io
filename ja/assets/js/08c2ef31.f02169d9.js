"use strict";(self.webpackChunktouchgfx_documentation=self.webpackChunktouchgfx_documentation||[]).push([[59726],{49613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(59496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),h=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=h(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=h(n),d=r,u=p["".concat(s,".").concat(d)]||p[d]||m[d]||i;return n?a.createElement(u,o(o({ref:t},c),{},{components:n})):a.createElement(u,o({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var h=2;h<i;h++)o[h]=n[h];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},89639:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(59496),r=n(97395);const i=function(e){const t=e.noShadow||!1,n=e.width,i=e.height,o=(0,r.Z)(e.imageSource);return t?a.createElement("div",{className:"figure noshadow"},a.createElement("a",{href:o,target:"_blank"},a.createElement("img",{width:n,height:i,src:o})),a.createElement("p",null,e.children)):a.createElement("div",{className:"figure"},a.createElement("a",{href:o,target:"_blank"},a.createElement("img",{width:n,height:i,src:o})),a.createElement("p",null,e.children))}},12963:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(59496),r=n(97395);const i=function(e){const t=e.width,n=e.height,i=e.points||[],o=(0,r.Z)(e.imageSource);return a.createElement("div",{style:{position:"relative"}},a.createElement("div",{className:"figure"},a.createElement("a",{href:o,target:"_blank"},a.createElement("img",{width:t,height:n,src:o})),i.map((function(e,t){return a.createElement("svg",{style:{position:"absolute",top:0,left:0,pointerEvents:"none"},viewBox:"0 0 500 500"},a.createElement("g",{transform:"translate("+e[0]+", "+e[1]+")"},a.createElement("path",{id:"p1",d:"M12 2c3.196 0 6 2.618 6 5.602 0 2.238-1.058 3.488-2.659 5.381-1.078 1.274-2.303 2.722-3.341 4.697-1.038-1.976-2.263-3.423-3.341-4.697-1.601-1.893-2.659-3.143-2.659-5.381 0-2.984 2.804-5.602 6-5.602z",fill:"white",stroke:"black"}),a.createElement("text",{x:"11.7",y:"9.5","font-size":"x-small","dominant-baseline":"middle","text-anchor":"middle"},t+1)))})),a.createElement("p",null,e.children)))}},96151:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(59496);class r extends a.Component{render(){const e=`highlight highlight-${this.props.type}`;return a.createElement("div",{className:e},a.createElement("div",{className:"highlight-heading"},a.createElement("h5",null,a.createElement("div",{className:"highlight-icon"},this.props.icon),this.props.header)),a.createElement("div",{className:"highlight-content"},this.props.children))}}const i=r},49018:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(59496),r=n(96151);const i=a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}));class o extends a.Component{render(){return a.createElement(r.Z,{color:"var(--highlight-color-note)",header:"Note",type:"note",icon:i},this.props.children)}}const l=o},96277:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>c,default:()=>f,frontMatter:()=>h,metadata:()=>p,toc:()=>d});n(59496);var a=n(49613),r=n(89639),i=n(12963),o=n(49018);function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l.apply(this,arguments)}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const h={id:"font-compression",title:"Bitmap Font Compression"},c=void 0,p={unversionedId:"development/ui-development/touchgfx-engine-features/font-compression",id:"development/ui-development/touchgfx-engine-features/font-compression",title:"Bitmap Font Compression",description:"TouchGFX supports bitmap font compression starting from version 4.25.",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/development/ui-development/touchgfx-engine-features/font-compression.mdx",sourceDirName:"development/ui-development/touchgfx-engine-features",slug:"/development/ui-development/touchgfx-engine-features/font-compression",permalink:"/4.25/ja/docs/development/ui-development/touchgfx-engine-features/font-compression",draft:!1,tags:[],version:"current",frontMatter:{id:"font-compression",title:"Bitmap Font Compression"},sidebar:"docs",previous:{title:"\u753b\u50cf\u306e\u5727\u7e2e",permalink:"/4.25/ja/docs/development/ui-development/touchgfx-engine-features/image-compression"},next:{title:"\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\uff65\u30b9\u30c8\u30ec\u30fc\u30b8",permalink:"/4.25/ja/docs/development/ui-development/touchgfx-engine-features/animation-storage"}},m={},d=[{value:"Performance",id:"font-performance",level:2},{value:"Font data size",id:"font-data-size",level:3},{value:"Rendering",id:"font-rendering",level:3},{value:"Conclusion",id:"font-conclusion",level:4},{value:"Configuration",id:"font-configuration",level:2},{value:"Cache size",id:"font-cache-size",level:3},{value:"Caching failure",id:"font-caching-failure",level:3},{value:"Limitations",id:"font-limitations",level:2}],u={toc:d},g="wrapper";function f(e){var{components:t}=e,n=s(e,["components"]);return(0,a.kt)(g,l({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"TouchGFX supports bitmap font compression starting from version 4.25."),(0,a.kt)("p",null,"The bitmap font compression feature allows bitmap fonts in 4 BPP to be compressed. The target is to reduce the size of the font data while maintaining the rendering performance."),(0,a.kt)("p",null,'It is very simple to enable font compression in the Designer. You just select "4 - compressed" as the "Bpp" for your typography in the Designer.'),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/font-compression/dialogue1.png",mdxType:"Figure"},"Selecting compressed 4 BPP"),(0,a.kt)("p",null,"Two types of applications can benefit from this. An application with many thousand letters, for example Chinese letters, or an application with very large letters. These applications gain a lot. Whereas an application using only English letters in size 20 will not gain many bytes, as the font data is already not large to begin with."),(0,a.kt)("p",null,"The compression rate depends on the size of the letters, the font size. Small fonts compress worse than larger fonts. You can expect compression from 30% to 70% of the original."),(0,a.kt)("p",null,"The letters are decompressed to a cache buffer before drawing. If the letter is not in the cache we have to pay for the decompression before rendering. The compression algorithm used (run-length type) is very easy to decompress, so this will normally not be a problem. If the letter it is already in the cache the performance of rendering will be a bit better than normal, because rendering from SRAM is faster than from external flash. The cache size can be configured in the Designer. See below."),(0,a.kt)("p",null,"If you are drawing the same letter many times, because it is repeated in the text or because you redraw the text as part of an animation or scrolling, the cache will in many cases eliminate the cost of decompressing."),(0,a.kt)(o.Z,{mdxType:"Note"},"The cache size must be big enough to hold the largest letter of the text you are drawing.",(0,a.kt)("p",null,"If the cache is not big enough, the application will stop."),(0,a.kt)("p",null,"See instructions ",(0,a.kt)("a",l({parentName:"p"},{href:"#font-configuration"}),"here"),".")),(0,a.kt)("p",null,"If the platform offers hardware accelerated drawing this is also used with compressed fonts."),(0,a.kt)("p",null,"An alternative to the compressed fonts are vector fonts. These are typically smaller than the compressed fonts when more than one size is used, but comes with a bigger performance hit."),(0,a.kt)("p",null,"Read about vector fonts ",(0,a.kt)("a",l({parentName:"p"},{href:"/4.25/ja/docs/development/ui-development/touchgfx-engine-features/vector-fonts"}),"here"),"."),(0,a.kt)("h2",l({},{id:"font-performance"}),"Performance"),(0,a.kt)("p",null,"In this section we will examine an application that uses a lot of Chinese letters and an application with large numbers."),(0,a.kt)("p",null,"For the first example we will create a font using NotoSansCJKsc-Black.otf in size 28. We include the range of characters 0x4E00 to 0x5E00 (plus a few extra used in the text). This gives us 4165 characters. A real Chinese application could of course include even more characters."),(0,a.kt)("p",null,"The application shows a text of 24 letters:"),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/font-compression/screen1.png",mdxType:"Figure"},"Chinese characters in size 28"),(0,a.kt)("p",null,"The second application uses Verdana in size 40 and size 140:"),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/font-compression/screen2.png",mdxType:"Figure"},"Verdana text in size 40 and 140"),(0,a.kt)("p",null,"We will check the size of the font data and the performance of drawing the letters."),(0,a.kt)("h3",l({},{id:"font-data-size"}),"Font data size"),(0,a.kt)("p",null,"The table below shows the font data size (sizes in bytes):"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Font"),(0,a.kt)("th",l({parentName:"tr"},{align:"right"}),"Size"),(0,a.kt)("th",l({parentName:"tr"},{align:"right"}),"Characters"),(0,a.kt)("th",l({parentName:"tr"},{align:"right"}),"Uncompressed size"),(0,a.kt)("th",l({parentName:"tr"},{align:"right"}),"Compressed size"),(0,a.kt)("th",l({parentName:"tr"},{align:"right"}),"Saving"),(0,a.kt)("th",l({parentName:"tr"},{align:"right"}),"Compression Ratio"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"NotoSansCJKsc-Black.otf"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"28"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"4,116"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"1,568,599"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"917,170"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"651,429"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"1.7")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Verdana.ttf"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"40"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"95"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"27,369"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"12,789"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"14,580"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"2.1")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Verdana.ttf"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"140"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"11"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"40,408"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"8,211"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"32,197"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"4.9")))),(0,a.kt)("p",null,"We see that compression of the Chinese characters saved more than half a megabyte of data. This can be large enough to reduce the size of the external flash and thus reduce the BOM cost."),(0,a.kt)("p",null,"The compression of the Verdana fonts did not save a similar amount of bytes even though the compression ratio was higher. Primarily because the number of characters is so much lower.",(0,a.kt)("br",{parentName:"p"}),"\n","The sum of the data for the two Verdana fonts is below 22Kb. This means that the font data can fit in the internal flash of very small devices."),(0,a.kt)("p",null,"If we generate the Noto font as a vector font, the size of the font data is 1,509,236 bytes. That is slightly less than the uncompressed font size, but larger than the compressed bitmap font. The big size gain with vector fonts comes when you use the vector font in multiple sizes, as the data is shared for all sizes of a font."),(0,a.kt)("h3",l({},{id:"font-rendering"}),"Rendering"),(0,a.kt)("p",null,"We will now check the performance of rendering compressed letters. As we will see the cache size is important. If the application repeatedly draws the same letters and the cache is big enough to hold them, the performance is close to uncompressed fonts and sometimes better."),(0,a.kt)("p",null,"We will start with the Chinese application and a cache size of 10,000 bytes. This is enough to hold the all used letters."),(0,a.kt)("p",null,"We measure the render time of redrawing the whole screen including the background image."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Test"),(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Cache size"),(0,a.kt)("th",l({parentName:"tr"},{align:"right"}),"Render time /ms"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Background Image"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"-"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"5.28 ms")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Uncompressed Noto"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"-"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"7.57 ms")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Compressed Noto"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"10000"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"7.55 ms")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Compressed Noto"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"5000"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"9.41 ms")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Compressed Noto"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"2000"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"9.42 ms")))),(0,a.kt)("p",null,"The cache requirement for holding all the letters shown is around 8000 bytes. If the cache is bigger than this and the characters have been decompressed in the first frame, the rendering can be done without decompressing again in all future frames. When the cache is smaller (5,000 or 2,000 bytes) we have to repeatedly decompress because the cache was not big enough to hold all characters. The performance is lower but still usable."),(0,a.kt)("p",null,"We will now look at the second application. This time only the large number is redrawn in every frame.  The numbers are around 4,000 bytes each, so a cache of 10,000 bytes is large enough to hold two numbers. A cache of e.g. 5000 bytes can only hold one letter and we have to decompress repeatedly."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Test"),(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Cache size"),(0,a.kt)("th",l({parentName:"tr"},{align:"right"}),"Render time /ms"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Background Image"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"-"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"1.44 ms")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Uncompressed Verdana"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"-"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"2.46 ms")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Compressed Verdana"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"10000"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"2.45 ms")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Compressed Verdana"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"5000"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"3.57 ms")))),(0,a.kt)("p",null,"We see again, that if the cache is large enough, the performance is unchanged, but we get a penalty otherwise."),(0,a.kt)("p",null,"As a final example we will use a more synthetic application just showing a lot of 'A' characters:"),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/font-compression/screen3.png",mdxType:"Figure"},"Verdana text in size 40"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Test"),(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Cache size"),(0,a.kt)("th",l({parentName:"tr"},{align:"right"}),"Render time /ms"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Background Image"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"-"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"5.19 ms")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Uncompressed Verdana"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"-"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"16.51 ms")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Compressed Verdana"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"10000"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"16.45 ms")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Compressed Verdana"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"1000"),(0,a.kt)("td",l({parentName:"tr"},{align:"right"}),"16.46 ms")))),(0,a.kt)("p",null,"The performance is identical in all configurations. Since we are only drawing a single character 'A' it is enough to have a very small cache."),(0,a.kt)("p",null,"The cache must be big enough to hold the unique characters drawn in the frame. In this case just the 'A'."),(0,a.kt)("h4",l({},{id:"font-conclusion"}),"Conclusion"),(0,a.kt)("p",null,"To sum up, compressed fonts have a performance identical to the uncompressed fonts if the cache holds the letters drawn in the frame. This means that compressed fonts can be used in animations and for scrolling text if the cache is big enough."),(0,a.kt)("p",null,"If the cache is not big enough, the performance hit of decompressing the letters is not big. This means that compressed fonts can be used for static texts with a (to) small cache without big performance problems."),(0,a.kt)("h2",l({},{id:"font-configuration"}),"Configuration"),(0,a.kt)("p",null,"As mentioned in the introduction font compression is enabled by selecting it on the individual Typographies in the Designer. The necessary decompression code is automatically included by the application."),(0,a.kt)("h3",l({},{id:"font-cache-size"}),"Cache size"),(0,a.kt)("p",null,'The cache size can be configured in the Designer. Select "Text Configuration" in the Config tab:'),(0,a.kt)(i.Z,{points:[[30,257],[130,97],[260,145]],imageSource:"/img/development/ui-development/touchgfx-engine-features/font-compression/config1.png",mdxType:"FigureWithPoints"},"Configuring the cache size."),(0,a.kt)("p",null,"If the cache is smaller than required by the largest compressed letter the TouchGFX Designer will report an error in the log:"),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/font-compression/error.png",mdxType:"Figure"},"Error output when the cache is not big enough."),(0,a.kt)("p",null,"Change the font cache to be bigger than the reported number."),(0,a.kt)("p",null,"The font files shows the minimal cache size required to draw all the letters in the font. Find this information in the TouchGFX/generated/fonts/src/Table_xxx.cpp files:"),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/font-compression/code1.png",mdxType:"Figure"},"Verdana size 140 compression size and minimal cache size"),(0,a.kt)("p",null,"We see above that the Verdana font in size 140 requires a cache of minimum 4025 bytes to draw all letters."),(0,a.kt)("h3",l({},{id:"font-caching-failure"}),"Caching failure"),(0,a.kt)("p",null,"If the cache is not large enough to hold the letter being drawn the application will stop.  The application calls the function ",(0,a.kt)("em",{parentName:"p"},"CompressedFontCache::unableToCache(const GlyphNode","*"," glyphNode, int byteSize)")," which never returns."),(0,a.kt)("p",null,"This will only happen if you modify the generated files manually."),(0,a.kt)("h2",l({},{id:"font-limitations"}),"Limitations"),(0,a.kt)("p",null,"It is not possible to use the same font in both compressed 4 Bpp and uncompressed 4 Bpp."))}f.isMDXComponent=!0}}]);