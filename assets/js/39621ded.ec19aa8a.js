"use strict";(self.webpackChunktouchgfx_documentation=self.webpackChunktouchgfx_documentation||[]).push([[43006],{49613:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var a=r(59496);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),f=c(r),d=n,m=f["".concat(s,".").concat(d)]||f[d]||u[d]||o;return r?a.createElement(m,l(l({ref:t},p),{},{components:r})):a.createElement(m,l({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[f]="string"==typeof e?e:n,l[1]=i;for(var c=2;c<o;c++)l[c]=r[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},89639:(e,t,r)=>{r.d(t,{Z:()=>o});var a=r(59496),n=r(97395);const o=function(e){const t=e.noShadow||!1,r=e.width,o=e.height,l=(0,n.Z)(e.imageSource);return t?a.createElement("div",{className:"figure noshadow"},a.createElement("a",{href:l,target:"_blank"},a.createElement("img",{width:r,height:o,src:l})),a.createElement("p",null,e.children)):a.createElement("div",{className:"figure"},a.createElement("a",{href:l,target:"_blank"},a.createElement("img",{width:r,height:o,src:l})),a.createElement("p",null,e.children))}},48753:(e,t,r)=>{r.d(t,{Z:()=>i});var a=r(59496),n=r(96151);const o=a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}));class l extends a.Component{render(){return a.createElement(n.Z,{color:"var(--highlight-color-further-reading)",header:"Further reading",type:"further-reading",icon:o},this.props.children)}}const i=l},96151:(e,t,r)=>{r.d(t,{Z:()=>o});var a=r(59496);class n extends a.Component{render(){const e=`highlight highlight-${this.props.type}`;return a.createElement("div",{className:e},a.createElement("div",{className:"highlight-heading"},a.createElement("h5",null,a.createElement("div",{className:"highlight-icon"},this.props.icon),this.props.header)),a.createElement("div",{className:"highlight-content"},this.props.children))}}const o=n},49018:(e,t,r)=>{r.d(t,{Z:()=>i});var a=r(59496),n=r(96151);const o=a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}));class l extends a.Component{render(){return a.createElement(n.Z,{color:"var(--highlight-color-note)",header:"Note",type:"note",icon:o},this.props.children)}}const i=l},6434:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>f,default:()=>y,frontMatter:()=>p,metadata:()=>u,toc:()=>m});r(59496);var a=r(49613),n=r(89639),o=r(48753),l=r(18399),i=r(49018);function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},s.apply(this,arguments)}function c(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}const p={id:"display",title:"Display",sidebar_label:"Display"},f=void 0,u={unversionedId:"development/touchgfx-hal-development/generator-how-to/touchgfx-al-configuration/display",id:"development/touchgfx-hal-development/generator-how-to/touchgfx-al-configuration/display",title:"Display",description:"The Display group contains configurations related to display, such as interface, dimensions and buffering strategies.",source:"@site/docs/development/touchgfx-hal-development/generator-how-to/touchgfx-al-configuration/display.mdx",sourceDirName:"development/touchgfx-hal-development/generator-how-to/touchgfx-al-configuration",slug:"/development/touchgfx-hal-development/generator-how-to/touchgfx-al-configuration/display",permalink:"/4.25/docs/development/touchgfx-hal-development/generator-how-to/touchgfx-al-configuration/display",draft:!1,tags:[],version:"current",frontMatter:{id:"display",title:"Display",sidebar_label:"Display"},sidebar:"docs",previous:{title:"TouchGFX AL Configuration",permalink:"/4.25/docs/development/touchgfx-hal-development/generator-how-to/touchgfx-al-configuration"},next:{title:"Driver",permalink:"/4.25/docs/development/touchgfx-hal-development/generator-how-to/touchgfx-al-configuration/driver"}},d={},m=[{value:"Interface and dimensions",id:"interface-and-dimensions",level:2},{value:"Framebuffer Pixel Format",id:"framebuffer-pixel-format",level:2},{value:"Framebuffer Stride",id:"framebuffer-stride",level:2},{value:"Buffering Strategies &amp; Location",id:"buffering-strategies",level:2}],h={toc:m},g="wrapper";function y(e){var{components:t}=e,r=c(e,["components"]);return(0,a.kt)(g,s({},h,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"Display")," group contains configurations related to display, such as interface, dimensions and buffering strategies."),(0,a.kt)(n.Z,{noShadow:!0,imageSource:"/img/development/touchgfx-hal-development/touchgfx-generator/display-settings.png",width:"350",mdxType:"Figure"},"TouchGFX Generator Display settings"),(0,a.kt)("h2",s({},{id:"interface-and-dimensions"}),"Interface and dimensions"),(0,a.kt)("p",null,"Multiple display interfaces are usable today with STM32 microcontrollers, e.g.:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Parallel RGB (LTDC)"),(0,a.kt)("li",{parentName:"ul"},"MIPI DSI"),(0,a.kt)("li",{parentName:"ul"},"FMC"),(0,a.kt)("li",{parentName:"ul"},"SPI")),(0,a.kt)("p",null,"In the case of MCUs with a display connected to an LTDC or FMC ",(0,a.kt)("em",{parentName:"p"},"TouchGFX Generator")," can generate code to transfer the framebuffer to the connected display. For DSI and SPI interfaces drivers must be implemented by developers themselves."),(0,a.kt)(o.Z,{mdxType:"FurtherReading"},"See section ",(0,a.kt)(l.Z,{to:"../../scenarios/scenarios-ltdc-parallel-rgb",mdxType:"Link"},"Scenarios")," for concrete examples of code for different display interfaces."),(0,a.kt)("h2",s({},{id:"framebuffer-pixel-format"}),"Framebuffer Pixel Format"),(0,a.kt)("p",null,'The following framebuffer pixel formats are currently supported by TouchGFX Generator. All options are available when using "Custom" display interface, otherwise options are restricted to display controller settings (e.g. configuring the LTDC Framebuffer format to "RGB565" will limit the options to "RGB565" in TouchGFX Generator).'),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"BW (1bpp)"),(0,a.kt)("li",{parentName:"ol"},"Grey2 (2bpp)"),(0,a.kt)("li",{parentName:"ol"},"Grey4 (4bpp)"),(0,a.kt)("li",{parentName:"ol"},"ABRG2222 (8bpp)"),(0,a.kt)("li",{parentName:"ol"},"ARGB2222 (8bpp)"),(0,a.kt)("li",{parentName:"ol"},"BGRA2222 (8bpp)"),(0,a.kt)("li",{parentName:"ol"},"RGBA2222 (8bpp)"),(0,a.kt)("li",{parentName:"ol"},"RGB565 (16bpp)"),(0,a.kt)("li",{parentName:"ol"},"RGB888 (24bpp)"),(0,a.kt)("li",{parentName:"ol"},"ARGB8888 (32bpp)"),(0,a.kt)("li",{parentName:"ol"},"XRGB8888 (32bpp)")),(0,a.kt)(i.Z,{mdxType:"Note"},"Some pixel formats have no- or only partial ChromART (DMA2D) support."),(0,a.kt)("h2",s({},{id:"framebuffer-stride"}),"Framebuffer Stride"),(0,a.kt)("p",null,"For some display interfaces (e.g. MIPI-DSI) having a larger framebuffer stride than the actual width of the display can increase the data transfer rate to the display if the larger stride is better aligned with the data packet size.\nUse of a larger framebuffer stride can be configured as:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"No")," - The framebuffer stride and display width are equal in size."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Yes")," - Allows the user to specify a framebuffer stride length.")),(0,a.kt)("h2",s({},{id:"buffering-strategies"}),"Buffering Strategies & Location"),(0,a.kt)("p",null,"The following frame buffer strategies can be configured through TouchGFX generator:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Single Buffer"),' - Use only one application frame buffer. Possibly limits performance but uses less memory. Can be used with the "Buffer Location" configuration to place it in internal RAM. For further optimization the user can define a function that returns the current line being processed by the display controller. This method is used by the framework to allow updates to memory that has already been transferred to the display during this frame.'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Double Buffer")," - Use two frame buffers. Usually allows for better performance at the cost of memory."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Partial Buffer - GRAM display")," - Use one or more user defined chunks of memory as the frame buffer, which are transferred to the GRAM on the display. This strategy is targeted at low cost solutions that do not rely on external RAM, but have displays for which a full frame buffer would exceed available memory."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Partial Buffer - LTDC driven display")," - Use a single block of memory that a power-of-2 fraction of the display size, e.g., 1/2, 1/4 or 1/8. This strategy is targeted platforms that do not have external RAM and/or large display resolutions. A LTDC driven display and GFXMMU is required for this strategy.")),(0,a.kt)("p",null,"In the case of ",(0,a.kt)("em",{parentName:"p"},"Single Buffer"),", ",(0,a.kt)("em",{parentName:"p"},"Double Buffer"),", and ",(0,a.kt)("em",{parentName:"p"},"Partial Buffer - LTDC driven display"),' users are allowed to configure their location through the "Buffer Location" configuration which offers the following options:'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"By Allocation")," - Lets the linker place frame buffer memory according to linker script. Default is in internal RAM."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"By Address")," - Allows the user to define one (Single) or two (Double) frame buffer addresses.")),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"Partial Buffer - GRAM display")," strategy allows the user to define the following parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Number of blocks (always placed in internal RAM)"),(0,a.kt)("li",{parentName:"ul"},"Block size (bytes)")),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"Partial Buffer - LTDC driven display")," strategy allows the user to define the following parameter:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Number of Partial Blocks (default is 4, meaning a framebuffer block 1/4 the size of the display)")),(0,a.kt)("p",null,"To understand some core concepts regarding framebuffer strategies, refer to the ",(0,a.kt)("a",s({parentName:"p"},{href:"../../../../basic-concepts/framebuffer#framebuffer-strategies"}),"Framebuffer Strategies")," article."),(0,a.kt)("p",null,"Several scenarios describe how to get started with different display interfaces and framebuffer strategies with concrete examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",s({parentName:"li"},{href:"../../scenarios/scenarios-ltdc-parallel-rgb"}),"LTDC Display Interface")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",s({parentName:"li"},{href:"../../scenarios/scenarios-dsi-video-mode"}),"MIPI-DSI Video Mode")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",s({parentName:"li"},{href:"../../scenarios/scenarios-fmc"}),"FMC Display Interface")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",s({parentName:"li"},{href:"../../scenarios/scenarios-spi"}),"SPI Display Interface")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",s({parentName:"li"},{href:"../../scenarios/scenarios-dsi-command-mode"}),"MIPI-DSI Command Mode"))))}y.isMDXComponent=!0}}]);