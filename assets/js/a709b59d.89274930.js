"use strict";(self.webpackChunktouchgfx_documentation=self.webpackChunktouchgfx_documentation||[]).push([[63523],{49613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var o=n(59496);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var m=o.createContext({}),l=function(e){var t=o.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return o.createElement(m.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,m=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),p=l(n),g=i,u=p["".concat(m,".").concat(g)]||p[g]||h[g]||s;return n?o.createElement(u,a(a({ref:t},c),{},{components:n})):o.createElement(u,a({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,a=new Array(s);a[0]=g;var r={};for(var m in t)hasOwnProperty.call(t,m)&&(r[m]=t[m]);r.originalType=e,r[p]="string"==typeof e?e:i,a[1]=r;for(var l=2;l<s;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},93822:(e,t,n)=>{n.d(t,{Z:()=>r});var o=n(59496),i=n(96151);const s=o.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},o.createElement("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}));class a extends o.Component{render(){return o.createElement(i.Z,{color:"var(--highlight-color-caution)",header:"Caution",type:"caution",icon:s},this.props.children)}}const r=a},28128:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(59496);class i extends o.Component{render(){return o.createElement("div",{className:"code-header"},o.createElement("div",null,o.createElement("h5",null,this.props.children)))}}const s=i},89639:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(59496),i=n(7029);const s=function(e){const t=e.noShadow||!1,n=e.width,s=e.height,a=(0,i.Z)(e.imageSource);return t?o.createElement("div",{className:"figure noshadow"},o.createElement("a",{href:a,target:"_blank"},o.createElement("img",{width:n,height:s,src:a})),o.createElement("p",null,e.children)):o.createElement("div",{className:"figure"},o.createElement("a",{href:a,target:"_blank"},o.createElement("img",{width:n,height:s,src:a})),o.createElement("p",null,e.children))}},96151:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(59496);class i extends o.Component{render(){const e=`highlight highlight-${this.props.type}`;return o.createElement("div",{className:e},o.createElement("div",{className:"highlight-heading"},o.createElement("h5",null,o.createElement("div",{className:"highlight-icon"},this.props.icon),this.props.header)),o.createElement("div",{className:"highlight-content"},this.props.children))}}const s=i},95467:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>p,default:()=>b,frontMatter:()=>c,metadata:()=>h,toc:()=>u});n(59496);var o=n(49613),i=n(93822),s=n(28128),a=n(95375),r=n(89639);function m(){return m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},m.apply(this,arguments)}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}const c={id:"image-compression",title:"Image Compression"},p=void 0,h={unversionedId:"development/ui-development/touchgfx-engine-features/image-compression",id:"development/ui-development/touchgfx-engine-features/image-compression",title:"Image Compression",description:"TouchGFX supports image compression starting from version 4.22. The",source:"@site/docs/development/ui-development/touchgfx-engine-features/image-compression.mdx",sourceDirName:"development/ui-development/touchgfx-engine-features",slug:"/development/ui-development/touchgfx-engine-features/image-compression",permalink:"/4.25/docs/development/ui-development/touchgfx-engine-features/image-compression",draft:!1,tags:[],version:"current",frontMatter:{id:"image-compression",title:"Image Compression"},sidebar:"docs",previous:{title:"Vector Fonts",permalink:"/4.25/docs/development/ui-development/touchgfx-engine-features/vector-fonts"},next:{title:"Bitmap Font Compression",permalink:"/4.25/docs/development/ui-development/touchgfx-engine-features/font-compression"}},g={},u=[{value:"L8 Compression",id:"l8-compression",level:2},{value:"3 algorithms",id:"three-algorithms",level:3},{value:"RGB Compression",id:"rgb-compression",level:2},{value:"2 algorithms",id:"two-algorithms",level:3},{value:"Working with Compressed Images",id:"working-with-compressed-images",level:2},{value:"Enabling the Image Compression Features",id:"enabling-image-compression",level:3},{value:"L8 Compression",id:"working-with-l8-compression",level:3},{value:"RGB Compression",id:"working-with-rgb-compression",level:3},{value:"Compression level",id:"compression-level",level:2},{value:"Compression Failure",id:"compression-failure",level:2},{value:"L8 Images",id:"compression-failure-l8-images",level:3},{value:"RGB Images",id:"compression-failure-rgb-images",level:3},{value:"Decompressing Images to the Bitmap Cache",id:"decompressing-images-to-the-bitmap-cache",level:2},{value:"Limit program size",id:"limit-program-size",level:3},{value:"Limitations",id:"limitations",level:2}],d={toc:u},f="wrapper";function b(e){var{components:t}=e,n=l(e,["components"]);return(0,o.kt)(f,m({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"TouchGFX supports image compression starting from version 4.22. The\nsupport from version 4.22 to 4.23 inclusive is limited to compression\nof L8 images. From version 4.24 compression of RGB565, RGB888, and\nARGB8888 image formats is supported."),(0,o.kt)("p",null,"Image compression is the process of reducing the storage requirements\nfor an image. The reduced size of the images in a project can result\nin cost reductions if a smaller flash is used. The reduction can also\nmean that more images can be used in the project resulting in a richer\nUI."),(0,o.kt)("p",null,"Image compression generally comes in two flavors: Lossless or\nlossy. Lossy image compression works by removing minor details of the\nimage. This often gives the biggest reduction but the original image\ncannot be reproduced exactly. Lossless compression always reproduces\nthe original image without any differences. Lossless compression gives\nin general a lower size reduction."),(0,o.kt)("p",null,"For graphics it is often required that UI elements are drawn exactly\nas they were designed. For this reason TouchGFX only supports lossless\ncompression."),(0,o.kt)("p",null,"The advantage of image compression is the size reduction, but there is\nalso a disadvantage, as the image must be decompressed when it is\ndrawn to the frame buffer. This decompression requires in many\nsituations more work from the CPU compared to drawing an uncompressed\nimage. A performance reduction is possibly the outcome."),(0,o.kt)("p",null,"This means that the advantage gained from the flash reduction must be\ncompared to the disadvantage from the increased CPU usage."),(0,o.kt)("p",null,"Be aware that the graphics accelerators DMA2D and GPU2D (ChromART and\nNeoChrom GPU) present in many STM32 micro controllers cannot draw a\ncompressed image directly. Compressed images are drawn using a mix of\nsoftware and hardware rendering, i.e. the compressed data is\ndecompressed in chunks by software and these chunks are then delegated\nto the DMA2D where applicable."),(0,o.kt)("p",null,"In many applications is it not recommended to compress all images, but\nonly those where the performance is not hurt and the flash reduction\nis relevant. See also the section below about ",(0,o.kt)("a",m({parentName:"p"},{href:"#decompressing-images-to-the-bitmap-cache"}),"decompression to the\nBitmap cache")," as a mean to\nget both lower storage requirement and good performance."),(0,o.kt)("h2",m({},{id:"l8-compression"}),"L8 Compression"),(0,o.kt)("p",null,"As mentioned above TouchGFX 4.22 supports compression of\nL8-images. Recall that the L8 bitmap formats are suitable only for images\nwith up to 256 colors. Each pixel is just an 8-bit number that refers\nto a color in a color table stored with the image.\nThe compression of an L8 is only compression of the pixel numbers. The\ncolor table is left untouched."),(0,o.kt)("p",null,"As an example consider the image below. It is used as a background in\na metering application."),(0,o.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/gauge.png",mdxType:"Figure"},"L8-ARGB8888"),(0,o.kt)("p",null,"The image is 184 x 184 pixels. The size of the pixel data is thus 184\nx 184 = 33,856 bytes."),(0,o.kt)("p",null,"If we compress the image the pixel data is reduced to 5,735 bytes. The\ntotal size of the compressed image data, including the color table, is\nless than 20% of the original image. Compression thus allows us to\nhave 5 different backgrounds in the same flash space, or to reduce the\nflash requirements by 28,121 bytes."),(0,o.kt)("p",null,"A compressed L8 image is used like an ordinary uncompressed\nbitmap. You can for example show the image using the Image widget\nwithout any modification to the project in the TouchGFX Designer or in\ncode. This makes use of compressed L8 images very easy."),(0,o.kt)("h3",m({},{id:"three-algorithms"}),"3 algorithms"),(0,o.kt)("p",null,"TouchGFX uses 3 different compression algorithms for the L8 format.\nThe image converter selects the algorithm that gives the best\ncompression, unless the user has mandated a specific algorithm in the\nconfiguration. The algorithms are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"L4, encode each pixel in 4 bits. Only works for images with up to 16 colors."),(0,o.kt)("li",{parentName:"ul"},"RLE, run-length encoding of the pixels. Only works for images with up to 64 colors."),(0,o.kt)("li",{parentName:"ul"},"LZW9, dictionary based encoding. Works for all L8 images.")),(0,o.kt)("p",null,"The RLE algorithm decompresses much faster than LZW9, so the image\nconverter will select RLE if LZW9 is only compressing the image\nmarginally better."),(0,o.kt)("h2",m({},{id:"rgb-compression"}),"RGB Compression"),(0,o.kt)("p",null,"As mentioned earlier, TouchGFX 4.24 introduced image compression\nsupport for the RGB565, RGB888, and ARGB8888 image formats. Images\nwhich contains more than 256 unique colors cannot be stored in the\ncompact L8 image format and must be stored in one of the\naforementioned formats. The compression of an RGB565, RGB888, or\nARGB8888 image is directly compressing the 16-, 24-, or 32-bit pixels."),(0,o.kt)("p",null,"As an example consider the image below. It is a more complex and rich\nbackground than the above example and has more than 256 unique colors.\nTherefore, it cannot be stored in L8, and it must be stored in the\nARGB8888 format because it has transparent pixels (in the corners)."),(0,o.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/clock.png",mdxType:"Figure"},"ARGB8888"),(0,o.kt)("p",null,"The image is 240 x 240 pixels. The size of the pixel data is thus 240\nx 240 x 4 = 230.400 bytes because we use 4 bytes to store each pixel\nin the ARGB8888 image format."),(0,o.kt)("p",null,"Compressing the image reduces the size to 32.347 bytes. The size of\nthe compressed image is considerably smaller and only 14% of the\noriginal image size. Compression allows us to have multiple complex\nbackgrounds in the same flash space, or reduce the flash requirements\nby a substantial amount. It also enables flash-limited devices to\nadopt more complex and rich graphics than otherwise possible with the\nL8 formats."),(0,o.kt)("p",null,"A compressed RGB image can be used like an ordinary uncompressed\nbitmap. You can for example show the image using the Image widget\nwithout any modification to the project in the TouchGFX Designer or in\ncode. This makes use of compressed RGB images very easy."),(0,o.kt)(i.Z,{mdxType:"Caution"},"Applying any ",(0,o.kt)(a.Z,{to:"../../../basic-concepts/color-formats#dithering",mdxType:"Link"},"dithering algorithm")," to an RGB image can in some cases compromise the effectiveness of the RGB compression."),(0,o.kt)("h3",m({},{id:"two-algorithms"}),"2 algorithms"),(0,o.kt)("p",null,"TouchGFX uses 2 slightly different compression algorithms which are\nautomatically selected based on the image format to be compressed. The\nalgorithms are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"QOI, encodes RGB888 and ARGB8888 pixels using a variation of the\n",(0,o.kt)("em",{parentName:"li"},"Quite OK Image format")," compression algorithm."),(0,o.kt)("li",{parentName:"ul"},"QOI565, encodes RGB565 pixels using a variation of QOI that is\ntailored for 16-bit pixel values.")),(0,o.kt)("p",null,"Both variants of the RGB Compression algorithms are optimized for fast\ndecompression speeds to limit the run-time performance penalty when\nrendering compressed RGB images."),(0,o.kt)("h2",m({},{id:"working-with-compressed-images"}),"Working with Compressed Images"),(0,o.kt)("h3",m({},{id:"enabling-image-compression"}),"Enabling the Image Compression Features"),(0,o.kt)("p",null,"Image compression requires extra code in the target application. To\navoid this higher space requirements, the compression code is optional\non some platforms. You may have to enable the feature for your project."),(0,o.kt)("p",null,'Click "Config" on the left of the Designer, then click "Framework Features"'),(0,o.kt)(r.Z,{width:"80%",imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/feature-config.png",mdxType:"Figure"},"Enabling image compression"),(0,o.kt)("p",null,"The image compression features are shown in the bottom. You can enable the specific feature set you need."),(0,o.kt)("p",null,"The targets has different options for the framework features, and in\nsome cases the target has no optional features as shown below:"),(0,o.kt)(r.Z,{width:"80%",imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/feature-config-u5.png",mdxType:"Figure"},"No optional framework features"),(0,o.kt)("p",null,"In this case all the features are always enabled."),(0,o.kt)(i.Z,{mdxType:"Caution"},"Be aware that the Designer does not show an error or warning if you use a feature that is not enabled. If you use image compression and the features is not enabled, the image is not drawn."),(0,o.kt)("h3",m({},{id:"working-with-l8-compression"}),"L8 Compression"),(0,o.kt)("p",null,"Compressed images are used just like the ordinary images. You either\nconfigure widgets to use the bitmaps in the TouchGFX Designer, or you\nassign the Bitmaps in code."),(0,o.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/image-configuration.png",mdxType:"Figure"},"Configuring compression for an L8-ARGB8888 image"),(0,o.kt)("p",null,'The only configuration required is to set the Compression value to\n"Auto". The Image Converter will then automatically select the most\nsuitable compression or none if the image is not compressible.'),(0,o.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/selecting-gauge-image.png",mdxType:"Figure"},"Selecting a compressed image for a Widget"),(0,o.kt)("p",null,"Now we can select the image for a Widget as normal. There is no\ndifference here compared to an uncompressed image."),(0,o.kt)("p",null,"There is also no difference when working with the images in code. The\ncompressed bitmaps are referenced using their BitmapID as usual:"),(0,o.kt)("pre",null,(0,o.kt)("code",m({parentName:"pre"},{className:"language-cpp"}),"    image1.setXY(148, 148);\n    image1.setBitmap(touchgfx::Bitmap(BITMAP_GAUGE_BACKGROUND_ID));\n")),(0,o.kt)("p",null,"Read more about compressed L8-images ",(0,o.kt)("a",m({parentName:"p"},{href:"../../ui-development/scenarios/using-the-l8-image-format-to-reduce-memory-consumption#l8-image-compression"}),"here")),(0,o.kt)("h3",m({},{id:"working-with-rgb-compression"}),"RGB Compression"),(0,o.kt)("p",null,"Compressing RGB565, RGB888, or ARGB8888 images in the TouchGFX\nDesigner follows the same process as L8 compression."),(0,o.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/image-configuration-argb8888.png",mdxType:"Figure"},"Configuring compression for an L8-ARGB8888 image"),(0,o.kt)("p",null,'If selecting "Yes" the Image Converter will compress the image with\nthe algorithm that matches the image format.'),(0,o.kt)("p",null,"As with the L8 Compression, we can select the image for a widget as\nnormal and reference the bitmap in code as usual."),(0,o.kt)("h2",m({},{id:"compression-level"}),"Compression level"),(0,o.kt)("p",null,"The compression algorithm selected by the Image Converter is written\nin the generated files. Here we can also find the compression level."),(0,o.kt)("p",null,"The image we used above in the L8 Compression example is generated\ninto the file ",(0,o.kt)("inlineCode",{parentName:"p"},"generated/images/src/image_gauge_background.cpp"),". The\nheader of this file reads:"),(0,o.kt)(s.Z,{mdxType:"CodeHeader"},"image_gauge_background.cpp (extract)"),(0,o.kt)("pre",null,(0,o.kt)("code",m({parentName:"pre"},{className:"language-cpp"}),'// 4.22 D0 AN R0 FL8_ARGB8888 U888 N0 SExtFlashSection EExtFlashSection CL8_LZW9\n\nLOCATION_PRAGMA("ExtFlashSection")\nKEEP extern const unsigned char image_gauge_background[] LOCATION_ATTRIBUTE("ExtFlashSection") = {\n  // 184x184 L8_ARGB8888 pixels. Compression [output/input x 100]: 5735/33856 x 100 = 16.9%\n  0x00, 0x26, 0x50, 0xa8, 0x60, 0xe1, 0x02, 0x86, 0x0c, 0x1a, 0x36, 0x70,\n  ....\n')),(0,o.kt)("p",null,"The end of the comment in the first line shows the compression algorithm.\nHere we see that the Image Converter has selected the LZW9 algorithm.\nThe end of line 5 shows that we have now 5735 bytes of pixel data\nwhereas the original was 33856 bytes. Resulting in a compression to\n16.9% (the smaller compression level the better). Note! The\ncompression percentage does not count the color table."),(0,o.kt)("h2",m({},{id:"compression-failure"}),"Compression Failure"),(0,o.kt)("p",null,"In some cases the Image Converter gives a warning or error when\ncompressing images. This can happen if the image is not compatible\nwith the selected algorithm, or if the size of the compressed image is\nnot below 90% of the original image. This will only happen in very\nrare coincidences. For example if a small image of 5 x 5 uses 25\ndifferent and distinct colors. Since there is no repetition or\nredundancy in the image, there is no possibilities for the compression\nto reduce the data."),(0,o.kt)("h3",m({},{id:"compression-failure-l8-images"}),"L8 Images"),(0,o.kt)("p",null,"For L8 images this can happen if a specific algorithm was selected\nthat does not match the given image. For example if an image contains\n17 colors or more, and and L4 compression is selected, the image can\nnot be compressed using the selected algorithm. The Image Converter\nwill print an error message when you generate code, and the Designer\nwill show an error message:"),(0,o.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/l4-failure.png",mdxType:"Figure"},"Compression error with specific algorithm"),(0,o.kt)("p",null,'The solution to the problem is to use another algorithm. The preferred\nway is to select "Auto" for L8 images. Then the image converter will\ntry all algorithms, and select the best algorithm of those who are\napplicable.'),(0,o.kt)("p",null,"In some rare cases the image does not compress below 90% of the\noriginal size. The Image Converter does not compress the image in that\ncase and issues a warning text as shown below:"),(0,o.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/l8-compression-warning.png",mdxType:"Figure"},"Compression warning"),(0,o.kt)("p",null,'The reason for not compressing is that the saving in flash size does\nnot outweigh the lower rendering performance. It is possible to force\nthe compression by not using "Auto" but selecting one of the\nalgorithms ("L4", "RLE", or "LZW").'),(0,o.kt)("p",null,"The warning message is only informational. The code generation\ncontinues and the project will work as expected."),(0,o.kt)("h3",m({},{id:"compression-failure-rgb-images"}),"RGB Images"),(0,o.kt)("p",null,'For RGB image formats you can not select the "Auto", as there is only\none compression algorithm. If you select "Yes" and the image is not\ncompressible below 90% of the original size, the Image Converter will\ngenerate an error:'),(0,o.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/rgb-failure.png",mdxType:"Figure"},"Compression error with RGB image"),(0,o.kt)("p",null,'The solution here is to select "None" for Compression for the image.'),(0,o.kt)("h2",m({},{id:"decompressing-images-to-the-bitmap-cache"}),"Decompressing Images to the Bitmap Cache"),(0,o.kt)("p",null,"Drawing compressed images performs in most cases worse than drawing\nuncompressed images. Further more, as mentioned in the introduction,\nthe graphics accelerators in STM32 micro-controllers (DMA2D and GPU2D)\ncannot draw the compressed images directly. Therefore, compressed\nimages are drawn by a mix of software and hardware, resulting in lower\nperformance and higher cpu-load."),(0,o.kt)("p",null,"For these reasons TouchGFX also contains functionality to decompress a\ncompressed image into the bitmap cache in RAM at runtime."),(0,o.kt)("p",null,"When the image is decompressed to RAM the drawing performance is\nsimilar to using uncompressed images and the accelerators can draw the\nimage."),(0,o.kt)("p",null,"To be able to decompress we need first to setup the bitmap cache. Read\nmore about using the bitmap cache\n",(0,o.kt)("a",m({parentName:"p"},{href:"caching-bitmaps#bitmap-cache-configuration"}),"here"),"."),(0,o.kt)("p",null,"After setting up the bitmap cache, we can decompress the image using\nthe function ",(0,o.kt)("inlineCode",{parentName:"p"},"Bitmap::decompress"),". The full code is shown below:"),(0,o.kt)("pre",null,(0,o.kt)("code",m({parentName:"pre"},{className:"language-cpp"}),"// Define an array for the bitmap cache\nuint16_t cache[20*1024]; //40 KB cache\n// Define an array for the decompression temporary buffer\nuint16_t lzwBuffer[1024];\n\nvoid TemplateView::setupScreen()\n{\n    ...\n    Bitmap::setCache(cache, sizeof(cache));                             // Register the bitmap cache\n    bool r = Bitmap::decompress(BITMAP_GAUGE_BACKGROUND_ID, lzwBuffer); // Decompress the bitmap\n    image1.setBitmap(touchgfx::Bitmap(BITMAP_GAUGE_BACKGROUND_ID));     // Use the bitmap as normal\n    image1.setXY(148, 148);                                             // Position Image widget\n}\n")),(0,o.kt)("p",null,"In this example we want to decompress the 184 x 184 image from the L8\nCompression example above into the bitmap cache. The bitmap cache must\nbe big enough to the hold uncompressed image. The 184 x 184 pixels\nplus the color table holding 207 ARGB8888 colors. The total size is\ntherefore 34,688 bytes."),(0,o.kt)("p",null,"In this example we use the LZW9 algorithm. A 2048 bytes buffer is used\nby the decompresser during the decompression of an LZW9 compressed\nimage (for building a dictionary). The buffer is not required after\nthe decompression and can be reused for other purposes. The buffer is\nnot required for decompression of L4, RLE, QOI, or QOI565 compressed\nimages."),(0,o.kt)("p",null,"When the decompressed image is not used anymore, it can be removed\nfrom the bitmap cache using the ",(0,o.kt)("inlineCode",{parentName:"p"},"Bitmap::cacheRemoveBitmap")," method."),(0,o.kt)("h3",m({},{id:"limit-program-size"}),"Limit program size"),(0,o.kt)("p",null,"If you use decompression into the bitmap cache you have a few options\nto limit the size of your program. As mentioned above there are two\ntypes of image compression; L8 and RGB. When using\n",(0,o.kt)("inlineCode",{parentName:"p"},"Bitmap::decompress")," your program will contain the code for both\ndecompressing L8 and RGB images. If you only use the RGB image\ncompression, you can use the dedicated method for decompressing RGB\nimages into the bitmap cache, which is ",(0,o.kt)("inlineCode",{parentName:"p"},"Bitmap::decompressRGB"),", that\nway your program will only contain the required code for decompressing\nRGB images. The same applies if you only use L8 compression, here the\nmethod is called ",(0,o.kt)("inlineCode",{parentName:"p"},"Bitmap::decompressL8"),". See examples below."),(0,o.kt)("pre",null,(0,o.kt)("code",m({parentName:"pre"},{className:"language-cpp"}),"void TemplateView::setupScreen()\n{\n    ...\n    // Decompress the bitmap (RGB using QOI)\n    bool r = Bitmap::decompressRGB(BITMAP_GAUGE_BACKGROUND_ID);\n    ...\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",m({parentName:"pre"},{className:"language-cpp"}),"void TemplateView::setupScreen()\n{\n    ...\n    // Decompress the bitmap (L8 using RLE, no buffer required)\n    bool r = Bitmap::decompressL8(BITMAP_GAUGE_BACKGROUND_ID);\n    ...\n}\n")),(0,o.kt)("h2",m({},{id:"limitations"}),"Limitations"),(0,o.kt)("p",null,"There are a few limitations when working with compressed images. Compressed images cannot be used with\nWidgets that scales or rotates the image, or with Widgets that fills an area, or with the Canvas\nwidgets."),(0,o.kt)(r.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/scalableimage.png",mdxType:"Figure"},"Using a compressed image for with an incompatible Widget."),(0,o.kt)(i.Z,{mdxType:"Caution"},"Compressed images can not be used with all Widgets. The Designer gives you a warning icon."),(0,o.kt)("p",null,"These limitations are made for performance reasons. The TouchGFX Designer\nwill not allow you to select a compressed image."),(0,o.kt)("p",null,"If you want to use a specific image with any of these Widgets we suggest\nto not enable compression for the image. Alternatively, you can\ndecompress the image at runtime."),(0,o.kt)("p",null,"The Widgets that does not support compressed images are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"TextureMapper"),(0,o.kt)("li",{parentName:"ul"},"ScalableImage"),(0,o.kt)("li",{parentName:"ul"},"Gauge for the needle and arc"),(0,o.kt)("li",{parentName:"ul"},"Static- and DynamicGraph for filling the area below the graph"),(0,o.kt)("li",{parentName:"ul"},"AnalogClock for the hands"),(0,o.kt)("li",{parentName:"ul"},"Circle, Line and Shape"),(0,o.kt)("li",{parentName:"ul"},"Circle- and LineProgress")))}b.isMDXComponent=!0}}]);