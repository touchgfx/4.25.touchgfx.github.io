"use strict";(self.webpackChunktouchgfx_documentation=self.webpackChunktouchgfx_documentation||[]).push([[94450],{49613:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var i=n(59496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=i.createContext({}),c=function(e){var t=i.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return i.createElement(d.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(d,".").concat(m)]||p[m]||u[m]||a;return n?i.createElement(h,o(o({ref:t},s),{},{components:n})):i.createElement(h,o({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},89639:(e,t,n)=>{n.d(t,{Z:()=>a});var i=n(59496),r=n(97395);const a=function(e){const t=e.noShadow||!1,n=e.width,a=e.height,o=(0,r.Z)(e.imageSource);return t?i.createElement("div",{className:"figure noshadow"},i.createElement("a",{href:o,target:"_blank"},i.createElement("img",{width:n,height:a,src:o})),i.createElement("p",null,e.children)):i.createElement("div",{className:"figure"},i.createElement("a",{href:o,target:"_blank"},i.createElement("img",{width:n,height:a,src:o})),i.createElement("p",null,e.children))}},48753:(e,t,n)=>{n.d(t,{Z:()=>l});var i=n(59496),r=n(96151);const a=i.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},i.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}));class o extends i.Component{render(){return i.createElement(r.Z,{color:"var(--highlight-color-further-reading)",header:"Further reading",type:"further-reading",icon:a},this.props.children)}}const l=o},96151:(e,t,n)=>{n.d(t,{Z:()=>a});var i=n(59496);class r extends i.Component{render(){const e=`highlight highlight-${this.props.type}`;return i.createElement("div",{className:e},i.createElement("div",{className:"highlight-heading"},i.createElement("h5",null,i.createElement("div",{className:"highlight-icon"},this.props.icon),this.props.header)),i.createElement("div",{className:"highlight-content"},this.props.children))}}const a=r},647:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>g,frontMatter:()=>c,metadata:()=>p,toc:()=>m});n(59496);var i=n(49613),r=n(89639),a=n(48753),o=n(18399);function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},l.apply(this,arguments)}function d(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const c={id:"scenarios-dsi-video-mode",title:"MIPI-DSI Video Mode"},s=void 0,p={unversionedId:"development/touchgfx-hal-development/scenarios/scenarios-dsi-video-mode",id:"development/touchgfx-hal-development/scenarios/scenarios-dsi-video-mode",title:"MIPI-DSI Video Mode",description:"This scenario describes how to configure a STM32 DSIHOST in Video Mode and TouchGFX Generator when using a display with Display Serial Interface (DSI).",source:"@site/docs/development/touchgfx-hal-development/scenarios/scenarios-dsi-video-mode.mdx",sourceDirName:"development/touchgfx-hal-development/scenarios",slug:"/development/touchgfx-hal-development/scenarios/scenarios-dsi-video-mode",permalink:"/4.25/docs/development/touchgfx-hal-development/scenarios/scenarios-dsi-video-mode",draft:!1,tags:[],version:"current",frontMatter:{id:"scenarios-dsi-video-mode",title:"MIPI-DSI Video Mode"},sidebar:"docs",previous:{title:"LTDC Display Interface",permalink:"/4.25/docs/development/touchgfx-hal-development/scenarios/scenarios-ltdc-parallel-rgb"},next:{title:"FMC Display Interface",permalink:"/4.25/docs/development/touchgfx-hal-development/scenarios/scenarios-fmc"}},u={},m=[{value:"Configuration",id:"configuration",level:2},{value:"LTDC Configuration",id:"ltdc-configuration",level:3},{value:"DSIHOST Configuration",id:"dsihost-configuration",level:3},{value:"TouchGFX Generator",id:"touchgfx-generator",level:3},{value:"User Code",id:"user-code",level:2},{value:"DSIHOST / LTDC Initialization sequence",id:"dsihost-ltdc-initialization-sequence",level:3},{value:"Updated TouchGFXHAL class for DSI Video Mode",id:"touchgfxhal-class-for-dsi-video-mode",level:3},{value:"Supported Framebuffer Strategies",id:"supported-framebuffer-strategies",level:2},{value:"Reference implementation",id:"reference-implementation",level:4}],h={toc:m},f="wrapper";function g(e){var{components:t}=e,n=d(e,["components"]);return(0,i.kt)(f,l({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This scenario describes how to configure a STM32 DSIHOST in Video Mode and ",(0,i.kt)("em",{parentName:"p"},"TouchGFX Generator")," when using a display with Display Serial Interface (DSI)."),(0,i.kt)("p",null,"The example used in this article will be for 24-bit RGB888 framebuffer format and goes through configurations in STM32CubeMX and exemplifies with generated code."),(0,i.kt)("h2",l({},{id:"configuration"}),"Configuration"),(0,i.kt)("h3",l({},{id:"ltdc-configuration"}),"LTDC Configuration"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Mode"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Set ",(0,i.kt)("inlineCode",{parentName:"li"},"Display Type")," to ",(0,i.kt)("em",{parentName:"li"},"RGB888 (24 bits) - DSI Mode")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Layer Settings"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Set ",(0,i.kt)("inlineCode",{parentName:"li"},"Number of layers")," to ",(0,i.kt)("em",{parentName:"li"},"1 layer")),(0,i.kt)("li",{parentName:"ul"},"Set ",(0,i.kt)("inlineCode",{parentName:"li"},"Layer 0 - Pixel Format")," to ",(0,i.kt)("em",{parentName:"li"},"RGB888")),(0,i.kt)("li",{parentName:"ul"},"Set ",(0,i.kt)("inlineCode",{parentName:"li"},"Layer 0 - Alpha constant for blending")," to ",(0,i.kt)("em",{parentName:"li"},"255"),(0,i.kt)(r.Z,{noShadow:!0,imageSource:"/img/development/touchgfx-hal-development/scenarios/dsi-video-mode/ltdc-config1.webp",width:"800",mdxType:"Figure"},"LTDC Configuration")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"NVIC Settings"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Enable LCD-TFT global interrupt",(0,i.kt)(r.Z,{noShadow:!0,imageSource:"/img/development/touchgfx-hal-development/scenarios/dsi-video-mode/ltdc-config2.webp",width:"800",mdxType:"Figure"},"LTDC NVIC Settings"))))),(0,i.kt)("h3",l({},{id:"dsihost-configuration"}),"DSIHOST Configuration"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Mode"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Set ",(0,i.kt)("inlineCode",{parentName:"li"},"DSIHost")," to ",(0,i.kt)("em",{parentName:"li"},(0,i.kt)("em",{parentName:"em"},"Video Mode"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Display Interface"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Set ",(0,i.kt)("inlineCode",{parentName:"li"},"Color Coding")," to ",(0,i.kt)("em",{parentName:"li"},"RGB888 (24 bits) - DSI mode")),(0,i.kt)("li",{parentName:"ul"},"Remaining configurations depends on the selected LCD HW",(0,i.kt)(r.Z,{noShadow:!0,imageSource:"/img/development/touchgfx-hal-development/scenarios/dsi-video-mode/dsihost-config1.webp",width:"800",mdxType:"Figure"},"DSIHOST Configuration")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"NVIC Settings"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"DSIHOST global interrupt is not needed and should be disabled.",(0,i.kt)(r.Z,{noShadow:!0,imageSource:"/img/development/touchgfx-hal-development/scenarios/dsi-video-mode/dsihost-config2.webp",width:"800",mdxType:"Figure"},"DSIHOST NVIC Settings"))))),(0,i.kt)("h3",l({},{id:"touchgfx-generator"}),"TouchGFX Generator"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Mode"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Enable ",(0,i.kt)("em",{parentName:"li"},"Graphics Application")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"TouchGFX Generator"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Set ",(0,i.kt)("inlineCode",{parentName:"li"},"Display / Interface")," to ",(0,i.kt)("em",{parentName:"li"},"Parallel RGB (LTDC)")," since this is still the controller the application needs to communicate with."),(0,i.kt)("li",{parentName:"ul"},"Set ",(0,i.kt)("inlineCode",{parentName:"li"},"Application Tick Source")," to ",(0,i.kt)("em",{parentName:"li"},"LTDC"),(0,i.kt)(r.Z,{noShadow:!0,imageSource:"/img/development/touchgfx-hal-development/scenarios/dsi-video-mode/touchgfx-generator-config.webp",width:"800",mdxType:"Figure"},"TouchGFX Generator Configuration"))))),(0,i.kt)("h2",l({},{id:"user-code"}),"User Code"),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"TouchGFX Generator")," can generate a ",(0,i.kt)("strong",{parentName:"p"},"full TouchGFX AL")," that configures the LTDC to transfer pixels through the DSI Host controller from the framebuffer memory to the display and synchronize the display with the TouchGFX Engine.\nOnly minor adjustments may be required as described below."),(0,i.kt)("h3",l({},{id:"dsihost-ltdc-initialization-sequence"}),"DSIHOST / LTDC Initialization sequence"),(0,i.kt)("p",null,"The call to ",(0,i.kt)("inlineCode",{parentName:"p"},"MX_DSIHOST_DSI_Init()")," must be done before ",(0,i.kt)("inlineCode",{parentName:"p"},"MX_LTDC_Init()"),". This should be handled by STM32CubeMX.\nIf this is not correct, take care to fix the order in a user code section."),(0,i.kt)("p",null,"After calling ",(0,i.kt)("inlineCode",{parentName:"p"},"HAL_DSI_Start()"),", switch DSIHOST clock to the ",(0,i.kt)("inlineCode",{parentName:"p"},"DSIPHY")," source:"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-cpp",metastring:"{12}","{12}":!0}),"static void MX_DSIHOST_DSI_Init(void)\n{\n  ...\n  /* Switch to DSI PHY PLL clock */\n  RCC_PeriphCLKInitTypeDef PeriphClkInit;\n  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;\n  PeriphClkInit.DsiClockSelection    = RCC_DSICLKSOURCE_DSIPHY;\n  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);\n  /* USER CODE END DSIHOST_Init 2 */\n  ...\n}\n")),(0,i.kt)("p",null,"User has to add the required initialization code specific to the used LCD controller at the end of the ",(0,i.kt)("inlineCode",{parentName:"p"},"MX_LTDC_Init()")," function.\nThat code will be based on the DSI HAL APIs ",(0,i.kt)("inlineCode",{parentName:"p"},"HAL_DSI_ShortWrite()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"HAL_DSI_LongWrite()"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-cpp"}),"  static void MX_LTDC_Init(void)\n  {\n    ...\n    /* USER CODE BEGIN LTDC_Init 2 */\n    // Specific LCD controller's initialization code\n    ...\n\n    // Exit Sleep Mode\n    if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, DSI_EXIT_SLEEP_MODE, 0x00) != HAL_OK)\n    {\n      Error_Handler();\n    }\n\n    HAL_Delay(120);\n    /* USER CODE END LTDC_Init 2 */\n    ...\n  }\n")),(0,i.kt)("h3",l({},{id:"touchgfxhal-class-for-dsi-video-mode"}),"Updated TouchGFXHAL class for DSI Video Mode"),(0,i.kt)("p",null,"The generated code for the LTDC interrupt is identical to the code generated when using Parallel RGB display interface."),(0,i.kt)("p",null,"One way to prevent the MIPI DSI display from turning on until we've rendered the first frame in the application is to guard the\nfunction ",(0,i.kt)("inlineCode",{parentName:"p"},"TouchGFXHAL::endFrame")," to keep the display off until first frame is rendered by TouchGFX. The ",(0,i.kt)("inlineCode",{parentName:"p"},"TouchGFXHAL::endFrame()")," could be updated as below, to enable the LCD and its Backlight through a HW Timer configured for PWM output."),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-cpp",metastring:"{7,9,11}","{7,9,11}":!0}),"void TouchGFXHAL::endFrame()\n{\n    if (!display_on)\n    {\n        display_on = true;\n        /* Enable the LCD, Send Display on DCS command to display */\n        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, DSI_SET_DISPLAY_ON, 0x00);\n        /* Start PWM Timer channel */\n        (void)HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);\n        /* Enable Backlight by setting Brightness to 100% */\n        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 2U * 100);\n    }\n\n    TouchGFXGeneratedHAL::endFrame();\n}\n")),(0,i.kt)("h2",l({},{id:"supported-framebuffer-strategies"}),"Supported Framebuffer Strategies"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Single"),(0,i.kt)("li",{parentName:"ul"},"Double"),(0,i.kt)("li",{parentName:"ul"},"Partial - LTDC driven display")),(0,i.kt)(a.Z,{mdxType:"FurtherReading"},"See article ",(0,i.kt)(o.Z,{to:"../../../basic-concepts/framebuffer#framebuffer-strategies",mdxType:"Link"},"Framebuffer Strategies")," for a general introduction to framebuffer strategies in TouchGFX."),(0,i.kt)("h4",l({},{id:"reference-implementation"}),"Reference implementation"),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"TouchGFX Board Setup")," STM32U5G9J DK1 includes a reference implementation running DSI Video Mode in RGB888 24-bit framebuffer format."),(0,i.kt)(r.Z,{imageSource:"/img/development/touchgfx-hal-development/scenarios/stm32u5g9-dk1.png",width:"200",mdxType:"Figure"}),(0,i.kt)(a.Z,{mdxType:"FurtherReading"},"See article ",(0,i.kt)(o.Z,{to:"scenarios-ltdc-parallel-rgb#supported-framebuffer-strategies",mdxType:"Link"},"LTDC Display Interface")," for more information about the generated TouchGFX AL compatible with DSI Video mode with LTDC."))}g.isMDXComponent=!0}}]);