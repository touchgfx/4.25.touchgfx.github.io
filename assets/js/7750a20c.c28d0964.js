"use strict";(self.webpackChunktouchgfx_documentation=self.webpackChunktouchgfx_documentation||[]).push([[39735],{49613:(e,t,n)=>{n.d(t,{Zo:()=>g,kt:()=>d});var a=n(59496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),s=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},g=function(e){var t=s(e.components);return a.createElement(m.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,m=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),p=s(n),c=r,d=p["".concat(m,".").concat(c)]||p[c]||u[c]||o;return n?a.createElement(d,i(i({ref:t},g),{},{components:n})):a.createElement(d,i({ref:t},g))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},93822:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(59496),r=n(96151);const o=a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},a.createElement("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}));class i extends a.Component{render(){return a.createElement(r.Z,{color:"var(--highlight-color-caution)",header:"Caution",type:"caution",icon:o},this.props.children)}}const l=i},28128:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(59496);class r extends a.Component{render(){return a.createElement("div",{className:"code-header"},a.createElement("div",null,a.createElement("h5",null,this.props.children)))}}const o=r},89639:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(59496),r=n(97395);const o=function(e){const t=e.noShadow||!1,n=e.width,o=e.height,i=(0,r.Z)(e.imageSource);return t?a.createElement("div",{className:"figure noshadow"},a.createElement("a",{href:i,target:"_blank"},a.createElement("img",{width:n,height:o,src:i})),a.createElement("p",null,e.children)):a.createElement("div",{className:"figure"},a.createElement("a",{href:i,target:"_blank"},a.createElement("img",{width:n,height:o,src:i})),a.createElement("p",null,e.children))}},48753:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(59496),r=n(96151);const o=a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}));class i extends a.Component{render(){return a.createElement(r.Z,{color:"var(--highlight-color-further-reading)",header:"Further reading",type:"further-reading",icon:o},this.props.children)}}const l=i},96151:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(59496);class r extends a.Component{render(){const e=`highlight highlight-${this.props.type}`;return a.createElement("div",{className:e},a.createElement("div",{className:"highlight-heading"},a.createElement("h5",null,a.createElement("div",{className:"highlight-icon"},this.props.icon),this.props.header)),a.createElement("div",{className:"highlight-content"},this.props.children))}}const o=r},49018:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(59496),r=n(96151);const o=a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}));class i extends a.Component{render(){return a.createElement(r.Z,{color:"var(--highlight-color-note)",header:"Note",type:"note",icon:o},this.props.children)}}const l=i},19786:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>c,default:()=>y,frontMatter:()=>u,metadata:()=>d,toc:()=>f});n(59496);var a=n(49613),r=n(89639),o=n(28128),i=n(48753),l=n(18399),m=n(49018),s=n(93822);function g(){return g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},g.apply(this,arguments)}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const u={id:"using-the-l8-image-format-to-reduce-memory-consumption",title:"Using the L8 Image Format to Reduce Memory Consumption"},c=void 0,d={unversionedId:"development/ui-development/scenarios/using-the-l8-image-format-to-reduce-memory-consumption",id:"development/ui-development/scenarios/using-the-l8-image-format-to-reduce-memory-consumption",title:"Using the L8 Image Format to Reduce Memory Consumption",description:"Images in the L8 format take up less flash storage and are faster to draw than e.g. ARGB8888.",source:"@site/docs/development/ui-development/scenarios/using-the-l8-image-format-to-reduce-memory-consumption.mdx",sourceDirName:"development/ui-development/scenarios",slug:"/development/ui-development/scenarios/using-the-l8-image-format-to-reduce-memory-consumption",permalink:"/4.25/docs/development/ui-development/scenarios/using-the-l8-image-format-to-reduce-memory-consumption",draft:!1,tags:[],version:"current",frontMatter:{id:"using-the-l8-image-format-to-reduce-memory-consumption",title:"Using the L8 Image Format to Reduce Memory Consumption"},sidebar:"docs",previous:{title:"Loading Images at Runtime",permalink:"/4.25/docs/development/ui-development/scenarios/loading-images-at-runtime"},next:{title:"Creating Dynamic L8 Images",permalink:"/4.25/docs/development/ui-development/scenarios/creating-dynamic-l8-images"}},h={},f=[{value:"L8 Image",id:"l8-image",level:2},{value:"Using  L8 Images in TouchGFX Designer",id:"using--l8-images-in-touchgfx-designer",level:2},{value:"Transparent Images",id:"transparent-images",level:2},{value:"Moving the palette to internal flash",id:"l8-move-palette",level:2},{value:"L8 Image Compression",id:"l8-image-compression",level:2},{value:"Example of compressed and uncompressed L8 images in a Widget",id:"example-of-compressed-and-uncompressed-l8-images-in-a-widget",level:3},{value:"Converting an image to 256 colors or less",id:"converting-an-image-to-256-colors",level:2},{value:"Paint.NET",id:"paintnet",level:3},{value:"ImageMagick",id:"imagemagick",level:3},{value:"Comparison",id:"comparison",level:3},{value:"Manual Configuration",id:"manual-configuration",level:2}],k={toc:f},b="wrapper";function y(e){var{components:t}=e,n=p(e,["components"]);return(0,a.kt)(b,g({},k,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Images in the L8 format take up less flash storage and are faster to draw than e.g. ARGB8888."),(0,a.kt)("p",null,"An image in L8 format consists of a color palette and a pixel array: The color palette lists up to 256 different colors specified in either 16-bit format RGB565, 24-bit format RGB888, or 32-bit format ARGB8888. The pixel array consists of one byte for each pixel. This byte is an index into the color palette (list of colors), pointing out the color for the pixel. The TouchGFX framework draws an L8 image by reading the pixels one-by-one, looking up the colors in the palette and writing these to the framebuffer. This happens automatically and is accelerated by the STM32 Chrom-ART hardware accelerator, if available on the hardware."),(0,a.kt)("p",null,"8-bit per pixel means that one L8 image can use 256 different colors. Another L8 image can use 256 other colors, since the two images each have their own palette."),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/scenarios/using-the-l8-image-format-to-reduce-memory-consumption/l8-image-with-4x4-pixels-and-palette-with-4-colors.webp",mdxType:"Figure"},"An L8 image with 4 x 4 pixels and a palette with 4 colors"),(0,a.kt)("p",null,"Pixels are one byte (8-bit) each. The size of the pixels is therefore width x height bytes. The palette colors can be 16-bit, 24-bit, or 32 bit colors. Each color definition will therefore take up 2, 3, or 4 bytes."),(0,a.kt)("p",null,"Solid images should be stored in L8_RGB888. If the image is transparent the 32-bit format (ARGB8888) must be used:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Format")),(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Framebuffer format")),(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Supports transparent pixels")),(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"}," Supported by DMA2D ")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",g({parentName:"tr"},{align:null}),"L8_RGB565"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"16-bit RGB565"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"No"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",g({parentName:"tr"},{align:null}),"L8_RGB888"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"24-bit RGB888"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"No"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"Yes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",g({parentName:"tr"},{align:null}),"L8_ARGB8888"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"Both"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"Yes"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"Yes")))),(0,a.kt)("p",null,"The L8 format with a RGB565 palette is not supported by DMA2D. This\nmeans that drawing images in this format is not hardware accelerated.\nThis format should therefore not be used unless you are on a platform\nwithout DMA2D (for example the STM32G0 or STM32F410)."),(0,a.kt)("p",null,"If you are using a serial flash (non-memory-mapped) to store the\nimages and a 16-bit framebuffer (format RGB565), then you should use\nthe L8_RGB565 format, because the color format then matches the\nframebuffer format and is faster to copy to the framebuffer."),(0,a.kt)("p",null,"The table below shows the preferred L8 format:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Framebuffer format")),(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Platform has DMA2D")),(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"}," Platform without DMA2D ")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",g({parentName:"tr"},{align:null}),"RGB565"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"L8_RGB888"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"L8_RGB565")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",g({parentName:"tr"},{align:null}),"RGB888"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"L8_RGB888"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"L8_RGB888")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",g({parentName:"tr"},{align:null}),"ARGB8888"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"L8_RGB888"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"L8_RGB888")))),(0,a.kt)("p",null,"Transparent images should always be in L8_ARGB8888."),(0,a.kt)(i.Z,{mdxType:"FurtherReading"},(0,a.kt)("li",null,"Read more about palette image formats here: ",(0,a.kt)(l.Z,{to:"https://en.wikipedia.org/wiki/Indexed_color",mdxType:"Link"},"https://en.wikipedia.org/wiki/Indexed_color"))),(0,a.kt)("h2",g({},{id:"l8-image"}),"L8 Image"),(0,a.kt)("p",null,"Here is a typical logo image. This image only uses 16 different colors:"),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/scenarios/using-the-l8-image-format-to-reduce-memory-consumption/touchgfx-logo-with-16-24bit-colors.webp",mdxType:"Figure"},"200 x 200 pixels L8 image with 16 different 24-bit colors."),(0,a.kt)("p",null,"The size in flash of this image is significant lower than the original image in the standard 24-bit format (RGB888). The table below lists the flash usage for this concrete image for the three different palette formats and for the non L8 format"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Format")),(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Size of pixels (bytes)")),(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Size of palette (bytes)")),(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Total size (bytes)")),(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Reduction (%)")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",g({parentName:"tr"},{align:null}),"RGB888"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"120,000"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"0"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"120,000"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"-")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",g({parentName:"tr"},{align:null}),"L8_RGB565"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"40,000"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"32"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"40,032"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"66.6")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",g({parentName:"tr"},{align:null}),"L8_RGB888"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"40,000"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"48"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"40,048"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"66.6")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",g({parentName:"tr"},{align:null}),"L8_ARGB8888"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"40,000"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"64"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"40,064"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"66.6")))),(0,a.kt)("p",null,"We see that the size reduction is very large, and that the size of the palette is insignificant on a medium sized image."),(0,a.kt)("h2",g({},{id:"using--l8-images-in-touchgfx-designer"}),"Using  L8 Images in TouchGFX Designer"),(0,a.kt)("p",null,"It is very easy to use the L8 image format in TouchGFX. The only thing to do is to configure the Image Converter to convert the image from PNG to L8 format. Here we will go through the whole process:"),(0,a.kt)("p",null,"Start a new project in the TouchGFX Designer. Copy your image to the assets/images folder in the new project:"),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/scenarios/using-the-l8-image-format-to-reduce-memory-consumption/touchgfx-logo-in-assets-images-folder.webp",mdxType:"Figure"},"Images folder of TouchGFX project"),(0,a.kt)("p",null,"Now go to the TouchGFX Designer and click the ",(0,a.kt)("a",g({parentName:"p"},{href:"../designer-user-guide/images-view"}),"Images tab")," in the top bar and select the image:"),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/scenarios/using-the-l8-image-format-to-reduce-memory-consumption/touchgfx-logo-in-touchgfx-designer-images-4.22.png",mdxType:"Figure"},"Logo in Images view of TouchGFX Designer"),(0,a.kt)("p",null,"On the right side on the window, select image format L8_RGB888 (this example is running 24 bit colors)."),(0,a.kt)("p",null,"An image Widget can now be inserted on the canvas (here we inserted a Box in the background):"),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/scenarios/using-the-l8-image-format-to-reduce-memory-consumption/touchgfx-logo-in-touchgfx-designer-canvas-4.22.png",mdxType:"Figure"},"Image widget on Canvas in TouchGFX Designer"),(0,a.kt)("p",null,"Nothing needs to be changed in the UI code. The Image Converter converts the PNG file and generates an image in L8 format because of the configuration we did in the Images tab."),(0,a.kt)("h2",g({},{id:"transparent-images"}),"Transparent Images"),(0,a.kt)("p",null,"As mentioned above it is also possible to use L8 format for images with transparency."),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/scenarios/using-the-l8-image-format-to-reduce-memory-consumption/button-image-32bit-non-opaque-argb8888.webp",mdxType:"Figure"},"170 x 60 pixels button image in 32 bit format ARGB8888"),(0,a.kt)("p",null,"The above image uses 108 colors (many shades of blue). This image can use the format L8_ARGB8888. The size will be significantly lower:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Format")),(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Size of pixels (bytes)")),(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Size of palette (bytes)")),(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Total size (bytes)")),(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Reduction in %")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",g({parentName:"tr"},{align:null}),"ARGB8888"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"40,800"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"0"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"40,800"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"-")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",g({parentName:"tr"},{align:null}),"L8_ARGB8888"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"10,200"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"432"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"10,632"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"73.9%")))),(0,a.kt)("h2",g({},{id:"l8-move-palette"}),"Moving the palette to internal flash"),(0,a.kt)("p",null,"On platforms that uses non-memory-mapped flash for the images (for\nexample the STM32G0, STM32U0, or STM32C0), it is required to move the\nL8 palette data to internal flash. Otherwise the L8 images will not be\ndrawn."),(0,a.kt)(r.Z,{imageSource:"/img/development/scenarios/touchgfx-on-lowcost-hardware/set-internal-flash.png",mdxType:"Figure"},"Configure location of extra data for an image to be in internal flash."),(0,a.kt)("p",null,'The palette of an image can be moved to internal flash by changing the\n"Extra Section" to "IntFlashSection" in the TouchGFX Designer (Open\nthe Images tab, find your image, and go to the right-most column).'),(0,a.kt)("h2",g({},{id:"l8-image-compression"}),"L8 Image Compression"),(0,a.kt)("p",null,'Memory consumption can be reduced even more by selecting L8\ncompression of your L8 image. The Image Converter supports 3\ncompression algorithms (L4, RLE, LZW9). In the TouchGFX Designer you\ncan set the Compression value to "Auto", this will let the Image\nConverter select the suitable algorithm for your image, alternatively\nyou can force a specific algorithm. The gain in reduced memory, comes\nin some cases with a price of increased CPU load due to decompression\ndirectly to the framebuffer when the image is drawn.'),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/scenarios/using-the-l8-image-format-to-reduce-memory-consumption/compressed-touchgfx-logo-in-touchgfx-designer-images.png",mdxType:"Figure"},"Selecting L8 Image Compression"),(0,a.kt)(m.Z,{mdxType:"Note"},"Default Dither Algorithm and Alpha Dither is disabled for L8 compressed images. Select a specific Dither Algorithm and Alpha Dither on each L8 image if required."),(0,a.kt)("p",null,"The L8 image compression has a default setting which is configurable\non the Default Image Configuration tab in the TouchGFX Designer, see\nscreenshot below. Here you select what the default setting for your\nentire application should be."),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/scenarios/using-the-l8-image-format-to-reduce-memory-consumption/default-l8-compression-designer.png",mdxType:"Figure"},"Default L8 Image Compression setting"),(0,a.kt)(s.Z,{mdxType:"Caution"},"Compressed images can not be used with all Widgets. See the ",(0,a.kt)(l.Z,{to:"../touchgfx-engine-features/image-compression#limitations",mdxType:"Link"},"list"),"."),(0,a.kt)(i.Z,{mdxType:"FurtherReading"},(0,a.kt)(l.Z,{to:"../touchgfx-engine-features/image-compression",mdxType:"Link"},"Image Compression")),(0,a.kt)("p",null,"In the following we will use the L8 image from previous to demonstrate\nthe compression capabilities of each algorithm and the performance of\ndecompression."),(0,a.kt)("p",null,"We use the STM32F429-DISCO with an application containing 4 screens,\nwith different compressions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"No compression"),(0,a.kt)("li",{parentName:"ul"},"L4 compression"),(0,a.kt)("li",{parentName:"ul"},"RLE compression"),(0,a.kt)("li",{parentName:"ul"},"LZW9 compression")),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/scenarios/using-the-l8-image-format-to-reduce-memory-consumption/l8-compression-render-time-screen.png",mdxType:"Figure"},"Example screen (240x320) with the L8 image running on STM32F429-DISCO"),(0,a.kt)(m.Z,{mdxType:"Note"},"The DMA2D is disabled to compare software rendering only."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Format")),(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Compression")),(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Size of pixels",(0,a.kt)("br",null),"(bytes)")),(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Size of palette + header",(0,a.kt)("br",null),"(bytes)")),(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Total size",(0,a.kt)("br",null),"(bytes)")),(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Reduction",(0,a.kt)("br",null),"(%)")),(0,a.kt)("th",g({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"th"},"Performance",(0,a.kt)("br",null),"(render time in ms)")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",g({parentName:"tr"},{align:null}),"RGB565"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"No"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"80,000"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"0"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"80,000"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"0"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"-")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",g({parentName:"tr"},{align:null}),"L8_RGB565"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"No"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"40,000"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"32 + 4"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"40,036"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"50.0"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"2.12")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",g({parentName:"tr"},{align:null}),"L8_RGB565"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"L4"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"20,000"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"32 + 4"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"20,036"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"75.0"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"2.34")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",g({parentName:"tr"},{align:null}),"L8_RGB565"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"RLE"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"3,197"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"32 + 164"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"3,393"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"95.7"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"1.66")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",g({parentName:"tr"},{align:null}),"L8_RGB565"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"LZW9"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"4,475"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"32 + 168"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"4,675"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"96.1"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),"7.45")))),(0,a.kt)("p",null,"The above table shows both the memory reduction from compression and\nthe performance for decompression when the image is drawn. Both the\ncompression (reduction) and decompression (performance) highly relies\non the complexity of the image and number of colors.\nEach algorithm has its limits of application, meaning, L4 is limited\nto 16 colors, RLE is limited to 64 colors and LZW9 works for all L8\nimages, i.e. no limits. Furthermore it is a fact that L4 and RLE\nperforms better than LZW9, when drawing the image, but as mentioned\nthey are not able to cover all L8 images. All algorithms will decrease\nin performance if the image is clipped.\nIn general this means you always have to consider the number of colors\n(quality requirement), the flash memory available (reduction\nrequirement) and the complexity of your application (animations) when\nyou use L8 image compression. E.g. if you have an image with more than\n64 colors and you use LZW9 but the performance penalty is to high, you\ncould try and reduce the number of colors in the image to 64 or less,\nif your quality requirements allow it, and then select RLE. If that is\nnot possible then your might be better of using an uncompressed L8\nimage.  See ",(0,a.kt)("a",g({parentName:"p"},{href:"#imagemagick"}),"ImageMagick")," for how to reduce colors in\nyour image."),(0,a.kt)("p",null,"If you are not going to use L8 image compression in your application, you\nshould disable the feature, below screenshot from the TouchGFX\nDesigner shows you how."),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/scenarios/using-the-l8-image-format-to-reduce-memory-consumption/feature-l8-compression-designer.png",mdxType:"Figure"},"Disabling L8 Image Compression"),(0,a.kt)("h3",g({},{id:"example-of-compressed-and-uncompressed-l8-images-in-a-widget"}),"Example of compressed and uncompressed L8 images in a Widget"),(0,a.kt)("p",null,"Even though L8 image compression can't be used for all widgets, it is\nstill possible to have some images compressed and others uncompressed\nin a widget composed of multiple images, e.g. Gauge and Analog Clock.\nBelow is an example showing how the background is compressed and the\nneedle is uncompressed in a Gauge widget."),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/scenarios/using-the-l8-image-format-to-reduce-memory-consumption/gauge-example-image-tab.png",mdxType:"Figure"},"Images used in Gauge widget"),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/scenarios/using-the-l8-image-format-to-reduce-memory-consumption/gauge-example.png",mdxType:"Figure"},"Gauge widget"),(0,a.kt)("h2",g({},{id:"converting-an-image-to-256-colors"}),"Converting an image to 256 colors or less"),(0,a.kt)("p",null,"Many images use more than 256 colors. This is common for images that are photo-realistic or images with gradients. These images cannot directly be converted to L8 image format in the TouchGFX Designer, because they contain to many colors."),(0,a.kt)("p",null,"In many cases though, it is possible to reduce the number of colors used in a specific image. Ideally, a graphics artist will convert/supply the images in 256 colors, however image manipulation tools can also perform the conversion without loosing too much of the image quality."),(0,a.kt)("h3",g({},{id:"paintnet"}),"Paint.NET"),(0,a.kt)("p",null,"The simplest way is to use Paint.NET. Open the original image and use Save As to save the image in another file. In the Save Configuration dialog, select 8-bit, as pixel depth:"),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/scenarios/using-the-l8-image-format-to-reduce-memory-consumption/paint-dot-net-convert-to-8bit.webp",mdxType:"Figure"},"Paint.NET saving image in 8 bit format"),(0,a.kt)("p",null,"Now use the new PNG in your project. Remember to select the L8_ARGB8888 format in the ",(0,a.kt)("a",g({parentName:"p"},{href:"../designer-user-guide/images-view"}),"Images tab"),' in the TouchGFX Designer. Shadows are not handled very well, but icons with transparent edges looks good in many cases. It is possible to adjust the "Transparency threshold" value and in some cases improve the result.'),(0,a.kt)("h3",g({},{id:"imagemagick"}),"ImageMagick"),(0,a.kt)("p",null,"Another suitable tool, that sometimes results in better L8 images, is ImageMagick (download from ",(0,a.kt)("a",g({parentName:"p"},{href:"https://imagemagick.org/"}),"www.imagemagick.org"),"). This tool can convert images from the command line. This makes it suitable for use in scripts. To convert the clock_bg.png to an image using at most 256 colors, use the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",g({parentName:"pre"},{}),"magick convert clock_bg.png -colors 256 clock_bg_l8_256.png\n")),(0,a.kt)("p",null,"You can also reduce the colors to less than 256 colors, in the case of enabling the RLE or L4 compression algorithms."),(0,a.kt)("pre",null,(0,a.kt)("code",g({parentName:"pre"},{}),"magick convert clock_bg.png -colors 64 clock_bg_l8_64.png\n")),(0,a.kt)("p",null,"ImageMagick can also tell you how many colors are used in an image. Use this command:"),(0,a.kt)("pre",null,(0,a.kt)("code",g({parentName:"pre"},{className:"language-bash"}),"magick identify -format %k Blue_Buttons_Round_Edge_small.png\n")),(0,a.kt)("h3",g({},{id:"comparison"}),"Comparison"),(0,a.kt)("p",null,"The three images (original, L8 using Paint.NET, L8 using ImageMagick) are seen below for comparison:"),(0,a.kt)(r.Z,{imageSource:"/img/development/ui-development/scenarios/using-the-l8-image-format-to-reduce-memory-consumption/clock-image-original-paint-dot-net-image-magick-comparison.webp",mdxType:"Figure"},"Clock image comparison, left to right: original, Paint.NET, ImageMagick"),(0,a.kt)("p",null,"The middle clock lost the details in the border shadow. In both cases the central part of the clock background looks usable."),(0,a.kt)("h2",g({},{id:"manual-configuration"}),"Manual Configuration"),(0,a.kt)("p",null,"It is also possible to select image formats and compression algorithm without using the TouchGFX Designer. The settings are specified in file application.config located in the project root:"),(0,a.kt)(o.Z,{mdxType:"CodeHeader"},"application.config"),(0,a.kt)("pre",null,(0,a.kt)("code",g({parentName:"pre"},{className:"language-json"}),'{\n  "image_configuration": {\n    images": {\n      "Blue_Buttons_Round_Edge_small.png": {\n        "format": "L8_ARGB8888",\n        "l8_compression": "LZW9"\n      }\n    },\n    "dither_algorithm": "2",\n    "alpha_dither": "yes",\n    "layout_rotation": "0",\n    "opaque_image_format": "RGB888",\n    "nonopaque_image_format": "ARGB8888",\n    "section": "ExtFlashSection",\n    "extra_section": "ExtFlashSection",\n    "l8_compression": "yes"\n  }\n}\n')),(0,a.kt)("p",null,'The "images" section under "image_configuration" specifies the format for individual images. If an image is not mentioned here, the image will be generated in the default format (opaque_image_format or nonopaque_image_format).'),(0,a.kt)("p",null,"We recommend using the TouchGFX Designer for image configuration when possible."))}y.isMDXComponent=!0}}]);