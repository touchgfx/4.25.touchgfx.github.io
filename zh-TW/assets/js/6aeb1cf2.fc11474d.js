"use strict";(self.webpackChunktouchgfx_documentation=self.webpackChunktouchgfx_documentation||[]).push([[73390],{49613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(59496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=d(n),u=r,h=m["".concat(s,".").concat(u)]||m[u]||c[u]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},89639:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(59496),r=n(7029);const i=function(e){const t=e.noShadow||!1,n=e.width,i=e.height,o=(0,r.Z)(e.imageSource);return t?a.createElement("div",{className:"figure noshadow"},a.createElement("a",{href:o,target:"_blank"},a.createElement("img",{width:n,height:i,src:o})),a.createElement("p",null,e.children)):a.createElement("div",{className:"figure"},a.createElement("a",{href:o,target:"_blank"},a.createElement("img",{width:n,height:i,src:o})),a.createElement("p",null,e.children))}},48753:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(59496),r=n(96151);const i=a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}));class o extends a.Component{render(){return a.createElement(r.Z,{color:"var(--highlight-color-further-reading)",header:"Further reading",type:"further-reading",icon:i},this.props.children)}}const l=o},96151:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(59496);class r extends a.Component{render(){const e=`highlight highlight-${this.props.type}`;return a.createElement("div",{className:e},a.createElement("div",{className:"highlight-heading"},a.createElement("h5",null,a.createElement("div",{className:"highlight-icon"},this.props.icon),this.props.header)),a.createElement("div",{className:"highlight-content"},this.props.children))}}const i=r},49018:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(59496),r=n(96151);const i=a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}));class o extends a.Component{render(){return a.createElement(r.Z,{color:"var(--highlight-color-note)",header:"Note",type:"note",icon:i},this.props.children)}}const l=o},5337:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>m,default:()=>k,frontMatter:()=>p,metadata:()=>c,toc:()=>h});n(59496);var a=n(49613),r=n(89639),i=n(49018),o=n(48753),l=n(95375);function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},s.apply(this,arguments)}function d(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const p={id:"scenarios-dsi-command-mode",title:"MIPI-DSI\u6307\u4ee4\u6a21\u5f0f"},m=void 0,c={unversionedId:"development/touchgfx-hal-development/scenarios/scenarios-dsi-command-mode",id:"development/touchgfx-hal-development/scenarios/scenarios-dsi-command-mode",title:"MIPI-DSI\u6307\u4ee4\u6a21\u5f0f",description:"This scenario describes how to configure MIPI DSI interface in Command Mode and TouchGFX Generator when using a display with a Display Serial Interface (DSI) and GRAM. The example used in this article will be for 16-bit RGB565 frame buffer format and goes through configurations in STM32CubeMX.",source:"@site/i18n/zh-TW/docusaurus-plugin-content-docs/current/development/touchgfx-hal-development/scenarios/scenarios-dsi-command-mode.mdx",sourceDirName:"development/touchgfx-hal-development/scenarios",slug:"/development/touchgfx-hal-development/scenarios/scenarios-dsi-command-mode",permalink:"/4.25/zh-TW/docs/development/touchgfx-hal-development/scenarios/scenarios-dsi-command-mode",draft:!1,tags:[],version:"current",frontMatter:{id:"scenarios-dsi-command-mode",title:"MIPI-DSI\u6307\u4ee4\u6a21\u5f0f"},sidebar:"docs",previous:{title:"SPI Display Interface",permalink:"/4.25/zh-TW/docs/development/touchgfx-hal-development/scenarios/scenarios-spi"},next:{title:"\u5373\u6642\u4f5c\u696d\u7cfb\u7d71",permalink:"/4.25/zh-TW/docs/development/touchgfx-hal-development/scenarios/scenarios-configure-rtos"}},u={},h=[{value:"Configuration",id:"configuration",level:2},{value:"LTDC\u8a2d\u5b9a",id:"ltdc\u8a2d\u5b9a",level:3},{value:"DSIHOST\u8a2d\u5b9a",id:"dsihost\u8a2d\u5b9a",level:3},{value:"TouchGFX Generator",id:"touchgfx-generator",level:3},{value:"User Code",id:"user-code",level:2},{value:"DSIHOST / LTDC\u521d\u59cb\u5316\u9806\u5e8f",id:"dsihost-ltdc-initialization-sequence",level:3},{value:"\u5df2\u66f4\u65b0DSI\u6307\u4ee4\u6a21\u5f0f\u7684TouchGFXHAL\u985e\u5225",id:"touchgfxhal-class-for-dsi-command-mode",level:3},{value:"Supported Framebuffer Strategies",id:"supported-framebuffer-strategies",level:2},{value:"Single",id:"single",level:3},{value:"Double",id:"double",level:3},{value:"Partial - GRAM display",id:"partial",level:3}],f={toc:h},g="wrapper";function k(e){var{components:t}=e,n=d(e,["components"]);return(0,a.kt)(g,s({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This scenario describes how to configure MIPI DSI interface in Command Mode and ",(0,a.kt)("em",{parentName:"p"},"TouchGFX Generator")," when using a display with a Display Serial Interface (DSI) and GRAM. The example used in this article will be for 16-bit RGB565 frame buffer format and goes through configurations in STM32CubeMX."),(0,a.kt)(i.Z,{mdxType:"Note"},"This scenario assumes that a working display driver has been developed during the Board Bringup phase. The driver must be able to transfer pixels to the display, and to control the memory writing position of the display. Check the datasheet for your display for further details."),(0,a.kt)("h2",s({},{id:"configuration"}),"Configuration"),(0,a.kt)("h3",s({},{id:"ltdc\u8a2d\u5b9a"}),"LTDC\u8a2d\u5b9a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"\u6a21\u5f0f"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"\u5c07",(0,a.kt)("inlineCode",{parentName:"li"},"Display Type")," (\u986f\u793a\u985e\u578b)\u8a2d\u5b9a\u70ba",(0,a.kt)("em",{parentName:"li"},"RGB565 (16 bits) - DSI Mode")," (RGB565 (16\u4f4d\u5143) - DSI\u6a21\u5f0f)"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"\u5c64\u8a2d\u5b9a"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"\u5c07",(0,a.kt)("inlineCode",{parentName:"li"},"Number of layers")," (\u5c64\u6578)\u8a2d\u5b9a\u70ba",(0,a.kt)("em",{parentName:"li"},"1 layer")," (1\u5c64)"),(0,a.kt)("li",{parentName:"ul"},"\u5728",(0,a.kt)("inlineCode",{parentName:"li"},"Windows Position")," (\u8996\u7a97\u4f4d\u7f6e)\u3001",(0,a.kt)("inlineCode",{parentName:"li"},"Frame Buffer Line Length")," (\u5f71\u50cf\u7de9\u885d\u5340\u884c\u9577\u5ea6)\u53ca",(0,a.kt)("inlineCode",{parentName:"li"},"Frame Buffer Number of Lines")," (\u5f71\u50cf\u7de9\u885d\u5340\u884c\u6578)\u8a2d\u5b9a\u87a2\u5e55\u89e3\u6790\u5ea6"),(0,a.kt)("li",{parentName:"ul"},"\u5c07",(0,a.kt)("inlineCode",{parentName:"li"},"Layer 0 - Pixel Format")," (\u7b2c0\u5c64 - \u50cf\u7d20\u683c\u5f0f)\u8a2d\u5b9a\u70ba",(0,a.kt)("em",{parentName:"li"},"RGB565")),(0,a.kt)("li",{parentName:"ul"},"\u5c07",(0,a.kt)("inlineCode",{parentName:"li"},"Layer 0 - Alpha constant for blending")," (\u7b2c0\u5c64 - \u7528\u65bc\u6df7\u5408\u7684Alpha\u5e38\u6578)\u8a2d\u5b9a\u70ba",(0,a.kt)("em",{parentName:"li"},"255")," ",(0,a.kt)(r.Z,{noShadow:!0,imageSource:"/img/development/touchgfx-hal-development/scenarios/dsi-command-mode/ltdc-config1.png",width:"600",mdxType:"Figure"},"LTDC\u8a2d\u5b9a")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"NVIC\u8a2d\u5b9a"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"LTDC global interrupt")," (LTDC\u5168\u57df\u4e2d\u65b7)\u53ca",(0,a.kt)("inlineCode",{parentName:"li"},"LTDC global error interrupt")," (LTDC\u5168\u57df\u932f\u8aa4\u4e2d\u65b7)\u90fd\u4e0d\u9700\u8981\u4e14\u61c9\u505c\u7528\u3002 ",(0,a.kt)(r.Z,{noShadow:!0,imageSource:"/img/development/touchgfx-hal-development/scenarios/dsi-command-mode/ltdc-config2.png",width:"600",mdxType:"Figure"},"LTDC NVIC\u8a2d\u5b9a"))))),(0,a.kt)("h3",s({},{id:"dsihost\u8a2d\u5b9a"}),"DSIHOST\u8a2d\u5b9a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"\u6a21\u5f0f"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"\u5c07",(0,a.kt)("inlineCode",{parentName:"li"},"DSIHost"),"\u8a2d\u5b9a\u70ba_*Adapted Command Mode with TE Pin**(\u9069\u6027\u6307\u4ee4\u6a21\u5f0f\u642d\u914dTE\u8173\u4f4d)"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"\u986f\u793a\u4ecb\u9762"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"\u5c07",(0,a.kt)("inlineCode",{parentName:"li"},"Color Coding")," (\u8272\u5f69\u7de8\u78bc)\u8a2d\u5b9a\u70ba",(0,a.kt)("em",{parentName:"li"},"RGB565 (16 bits) - DSI mode")," (RGB565 (16\u4f4d\u5143) - DSI\u6a21\u5f0f)"),(0,a.kt)("li",{parentName:"ul"},"\u5c07",(0,a.kt)("inlineCode",{parentName:"li"},"Maximum Command Size")," (\u6700\u5927\u6307\u4ee4\u5927\u5c0f)\u8a2d\u5b9a\u70ba\u986f\u793a\u5bec\u5ea6\u9806\u5e8f\u7684\u6578\u5b57"),(0,a.kt)("li",{parentName:"ul"},"\u5c07",(0,a.kt)("inlineCode",{parentName:"li"},"The Refresh of the Display Frame Buffer is Triggered")," (\u89f8\u767c\u986f\u793a\u5f71\u50cf\u7de9\u885d\u5340\u7684\u5237\u65b0\u983b\u7387)\u8a2d\u5b9a\u70ba",(0,a.kt)("em",{parentName:"li"},"manually by Enabling the LTDC")," (\u555f\u7528LTDC\u624b\u52d5\u9032\u884c)"),(0,a.kt)("li",{parentName:"ul"},"\u5269\u9918\u8a2d\u5b9a\u9700\u8996\u9078\u53d6\u7684LCD\u786c\u9ad4\u800c\u5b9a ",(0,a.kt)(r.Z,{noShadow:!0,imageSource:"/img/development/touchgfx-hal-development/scenarios/dsi-command-mode/dsihost-config1.png",width:"600",mdxType:"Figure"},"DSIHOST\u8a2d\u5b9a")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"NVIC\u8a2d\u5b9a"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"\u555f\u7528",(0,a.kt)("inlineCode",{parentName:"li"},"DSI global interrupt")," (DSI\u5168\u57df\u4e2d\u65b7) ",(0,a.kt)(r.Z,{noShadow:!0,imageSource:"/img/development/touchgfx-hal-development/scenarios/dsi-command-mode/dsihost-config2.png",width:"600",mdxType:"Figure"},"DSIHOST NVIC\u8a2d\u5b9a"))))),(0,a.kt)("h3",s({},{id:"touchgfx-generator"}),"TouchGFX Generator"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"\u6a21\u5f0f"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"\u555f\u7528",(0,a.kt)("em",{parentName:"li"},"Graphics Application")," (\u5716\u5f62\u61c9\u7528\u7a0b\u5f0f)"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"TouchGFX Generator"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"\u5c07",(0,a.kt)("inlineCode",{parentName:"li"},"Display / Interface")," (\u986f\u793a/\u4ecb\u9762)\u8a2d\u5b9a\u70ba",(0,a.kt)("em",{parentName:"li"},"Parallel RGB (LTDC)"),"(\u5e73\u884cRGB (LTDC))\uff0c\u56e0\u70ba\u9019\u4ecd\u662f\u61c9\u7528\u7a0b\u5f0f\u9700\u8981\u901a\u8a0a\u7684\u63a7\u5236\u5668\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u5c07",(0,a.kt)("inlineCode",{parentName:"li"},"Application Tick Source")," (\u61c9\u7528\u6642\u6a19\u6e90)\u8a2d\u5b9a\u70ba",(0,a.kt)("em",{parentName:"li"},"Custom")," (\u5ba2\u88fd) ",(0,a.kt)(r.Z,{noShadow:!0,imageSource:"/img/development/touchgfx-hal-development/scenarios/dsi-command-mode/touchgfx-generator-config.png",width:"600",mdxType:"Figure"},"TouchGFX Generator\u8a2d\u5b9a"))))),(0,a.kt)("h2",s({},{id:"user-code"}),"User Code"),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"TouchGFX Generator")," can only generate a partial TouchGFX AL that configures the LTDC to transfer pixels through the DSI Host controller from the framebuffer memory to the display and synchronize the display with the TouchGFX Engine. However, all necessary handles to accomplish this are generated by the TouchGFX Generator."),(0,a.kt)("p",null,"Generally, for displays with embedded GRAM, the implementation of the generated TouchGFX HAL handles in ",(0,a.kt)("inlineCode",{parentName:"p"},"TouchGFXHAL.cpp")," should perform the following steps to transfer pixels to the display and synchronize the display with the TouchGFX Engine:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},'Wait for "VSYNC" (sometimes called Tearing Effect (TE) signal) to signal the TouchGFX Engine.'),(0,a.kt)("li",{parentName:"ol"},'Based on the area of the framebuffer to be redrawn, move the "display cursor" and "active window" (the region of the display being updated) to a place in GRAM that matches this area.'),(0,a.kt)("li",{parentName:"ol"},"Prepare to write incoming pixel data to GRAM. Depending on the framebuffer strategy and display interface used, this could be swapping framebuffer pointers, signaling TouchGFX Engine, or waiting for previous transfers to complete."),(0,a.kt)("li",{parentName:"ol"},"Send pixel data.")),(0,a.kt)("p",null,"Depending on the display used and the framebuffer strategy, the implementation of the above steps will vary."),(0,a.kt)("p",null,"Some of the adjustments that may be needed specifcally for DSI Command Mode interfaces are described below."),(0,a.kt)("h3",s({},{id:"dsihost-ltdc-initialization-sequence"}),"DSIHOST / LTDC\u521d\u59cb\u5316\u9806\u5e8f"),(0,a.kt)("p",null,"\u5c0d",(0,a.kt)("inlineCode",{parentName:"p"},"MX_DSIHOST_DSI_Init()"),"\u7684\u547c\u53eb\u5fc5\u9808\u5728",(0,a.kt)("inlineCode",{parentName:"p"},"MX_LTDC_Init()"),"\u4e4b\u524d\u5b8c\u6210\uff0c This should be handled by STM32CubeMX. If this is not correct, take care to fix the order in a user code section."),(0,a.kt)("p",null,"After calling ",(0,a.kt)("inlineCode",{parentName:"p"},"HAL_DSI_Start()"),", switch DSIHOST clock to the ",(0,a.kt)("inlineCode",{parentName:"p"},"DSIPHY")," source:"),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-cpp",metastring:"{12}","{12}":!0}),"static void MX_DSIHOST_DSI_Init(void)\n{\n  ...\n  /* Switch to DSI PHY PLL clock */\n  RCC_PeriphCLKInitTypeDef PeriphClkInit;\n  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;\n  PeriphClkInit.DsiClockSelection    = RCC_DSICLKSOURCE_DSIPHY;\n  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);\n  /* USER CODE END DSIHOST_Init 2 */\n  ...\n}\n")),(0,a.kt)("p",null,"User has to add the required initialization code specific to the used LCD controller at the end of the ",(0,a.kt)("inlineCode",{parentName:"p"},"MX_LTDC_Init()")," function. That code will be based on the DSI HAL APIs ",(0,a.kt)("inlineCode",{parentName:"p"},"HAL_DSI_ShortWrite()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"HAL_DSI_LongWrite()"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-cpp"}),"  static void MX_LTDC_Init(void)\n  {\n    ...\n    /* USER CODE BEGIN LTDC_Init 2 */\n    // Specific LCD controller's initialization code\n    ...\n\n    // Exit Sleep Mode\n    if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, DSI_EXIT_SLEEP_MODE, 0x00) != HAL_OK)\n    {\n      Error_Handler();\n    }\n\n    HAL_Delay(120);\n    /* USER CODE END LTDC_Init 2 */\n    ...\n  }\n")),(0,a.kt)("h3",s({},{id:"touchgfxhal-class-for-dsi-command-mode"}),"\u5df2\u66f4\u65b0DSI\u6307\u4ee4\u6a21\u5f0f\u7684TouchGFXHAL\u985e\u5225"),(0,a.kt)("p",null,"\u9632\u6b62MIPI DSI\u986f\u793a\u5728\u61c9\u7528\u7a0b\u5f0f\u4e2d\u6e32\u67d3\u7b2c\u4e00\u5e40\u4e4b\u524d\u958b\u555f\u7684\u4e00\u7a2e\u65b9\u6cd5\u662f\u4fdd\u8b77",(0,a.kt)("inlineCode",{parentName:"p"},"TouchGFXHAL::endFrame"),"\u51fd\u6578\uff0c\u4ee5\u4fbf\u5728TouchGFX\u6e32\u67d3\u7b2c\u4e00\u5e40\u4e4b\u524d\u95dc\u9589\u986f\u793a\u3002 ",(0,a.kt)("inlineCode",{parentName:"p"},"TouchGFXHAL::endFrame()"),"\u53ef\u50cf\u4e0b\u9762\u9019\u6a23\u66f4\u65b0\uff0c\u900f\u904e\u8a2d\u5b9a\u70baPWM\u8f38\u51fa\u7684HW\u8a08\u6642\u5668\u555f\u7528LCD\u53ca\u5176\u80cc\u5149\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-cpp",metastring:"{7,9,11}","{7,9,11}":!0}),"void TouchGFXHAL::endFrame()\n{\n    if (!display_on)\n    {\n        display_on = true;\n        /* Enable the LCD, Send Display on DCS command to display */\n        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, DSI_SET_DISPLAY_ON, 0x00);\n        /* Start PWM Timer channel */\n        (void)HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);\n        /* Enable Backlight by setting Brightness to 100% */\n        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 2U * 100);\n    }\n\n    TouchGFXGeneratedHAL::endFrame();\n}\n")),(0,a.kt)("h2",s({},{id:"supported-framebuffer-strategies"}),"Supported Framebuffer Strategies"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Single"),(0,a.kt)("li",{parentName:"ul"},"Double"),(0,a.kt)("li",{parentName:"ul"},"Partial - GRAM display")),(0,a.kt)(o.Z,{mdxType:"FurtherReading"},"See article ",(0,a.kt)(l.Z,{to:"../../../basic-concepts/framebuffer#framebuffer-strategies",mdxType:"Link"},"Framebuffer Strategies")," for a general introduction to framebuffer strategies in TouchGFX."),(0,a.kt)("p",null,"DSI Command Mode usually has a high enough bandwidth to transfer pixels to GRAM fast than the display scans the pixels. This is very similar to to the FMC Parallel display interface. Therefore, the implementation steps for a working TouchGFX AL for DSI Command Mode is very similar to the FMC Parallel display interface."),(0,a.kt)(o.Z,{mdxType:"FurtherReading"},"See article ",(0,a.kt)(l.Z,{to:"scenarios-fmc",mdxType:"Link"},"FMC Display Interface")," for more information about the TouchGFX AL implementation."),(0,a.kt)("h3",s({},{id:"single"}),"Single"),(0,a.kt)("p",null,"Currently, no ",(0,a.kt)("em",{parentName:"p"},"TouchGFX Board Support")," have a reference implementation for Single buffering with DSI Command Mode. The setup would be similar to ",(0,a.kt)(l.Z,{to:"scenarios-fmc#single",mdxType:"Link"},"FMC Single buffer")," setup, but using DSI Command Mode driver functions instead of FMC."),(0,a.kt)("h3",s({},{id:"double"}),"Double"),(0,a.kt)("p",null,"Currently, no ",(0,a.kt)("em",{parentName:"p"},"TouchGFX Board Support")," have a reference implementation for Double buffering with DSI Command Mode. The setup would be similar to ",(0,a.kt)(l.Z,{to:"scenarios-fmc#double",mdxType:"Link"},"FMC Double buffer")," setup, but using DSI Command Mode driver functions instead of FMC."),(0,a.kt)("h3",s({},{id:"partial"}),"Partial - GRAM display"),(0,a.kt)("p",null,"Currently, no ",(0,a.kt)("em",{parentName:"p"},"TouchGFX Board Support")," have a reference implementation for ",(0,a.kt)("em",{parentName:"p"},"Partial - GRAM display")," with DSI Command Mode. The setup would be similar to ",(0,a.kt)(l.Z,{to:"scenarios-fmc#partial",mdxType:"Link"},"FMC Partial - GRAM display")," setup, but using DSI Command Mode driver functions instead of FMC."))}k.isMDXComponent=!0}}]);