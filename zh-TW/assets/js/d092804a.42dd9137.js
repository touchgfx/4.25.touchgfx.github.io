"use strict";(self.webpackChunktouchgfx_documentation=self.webpackChunktouchgfx_documentation||[]).push([[44816],{49613:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var a=r(59496);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),f=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=f(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=f(r),d=n,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return r?a.createElement(h,l(l({ref:t},p),{},{components:r})):a.createElement(h,l({ref:t},p))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:n,l[1]=o;for(var f=2;f<i;f++)l[f]=r[f];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},89639:(e,t,r)=>{r.d(t,{Z:()=>i});var a=r(59496),n=r(97395);const i=function(e){const t=e.noShadow||!1,r=e.width,i=e.height,l=(0,n.Z)(e.imageSource);return t?a.createElement("div",{className:"figure noshadow"},a.createElement("a",{href:l,target:"_blank"},a.createElement("img",{width:r,height:i,src:l})),a.createElement("p",null,e.children)):a.createElement("div",{className:"figure"},a.createElement("a",{href:l,target:"_blank"},a.createElement("img",{width:r,height:i,src:l})),a.createElement("p",null,e.children))}},48753:(e,t,r)=>{r.d(t,{Z:()=>o});var a=r(59496),n=r(96151);const i=a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}));class l extends a.Component{render(){return a.createElement(n.Z,{color:"var(--highlight-color-further-reading)",header:"Further reading",type:"further-reading",icon:i},this.props.children)}}const o=l},96151:(e,t,r)=>{r.d(t,{Z:()=>i});var a=r(59496);class n extends a.Component{render(){const e=`highlight highlight-${this.props.type}`;return a.createElement("div",{className:e},a.createElement("div",{className:"highlight-heading"},a.createElement("h5",null,a.createElement("div",{className:"highlight-icon"},this.props.icon),this.props.header)),a.createElement("div",{className:"highlight-content"},this.props.children))}}const i=n},49018:(e,t,r)=>{r.d(t,{Z:()=>o});var a=r(59496),n=r(96151);const i=a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}));class l extends a.Component{render(){return a.createElement(n.Z,{color:"var(--highlight-color-note)",header:"Note",type:"note",icon:i},this.props.children)}}const o=l},3486:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>m,default:()=>y,frontMatter:()=>p,metadata:()=>u,toc:()=>h});r(59496);var a=r(49613),n=r(89639),i=r(48753),l=r(18399),o=r(49018);function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},s.apply(this,arguments)}function f(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}const p={id:"framebuffer",title:"\u5f71\u50cf\u7de9\u885d\u5340"},m=void 0,u={unversionedId:"basic-concepts/framebuffer",id:"basic-concepts/framebuffer",title:"\u5f71\u50cf\u7de9\u885d\u5340",description:"\u5f71\u50cf\u7de9\u885d\u662f\u8a18\u61b6\u9ad4\u7684\u4e00\u90e8\u5206\uff0c\u5716\u5f62\u5f15\u64ce\u901a\u904e\u66f4\u65b0\u5f71\u50cf\u7de9\u885d\uff0c\u5c07\u8981\u5728\u986f\u793a\u5668\u4e0a\u986f\u793a\u7684\u4e0b\u4e00\u5e45\u5716\u50cf\u5305\u542b\u9032\u4f86\u3002",source:"@site/i18n/zh-TW/docusaurus-plugin-content-docs/current/basic-concepts/framebuffer.mdx",sourceDirName:"basic-concepts",slug:"/basic-concepts/framebuffer",permalink:"/4.25/zh-TW/docs/basic-concepts/framebuffer",draft:!1,tags:[],version:"current",frontMatter:{id:"framebuffer",title:"\u5f71\u50cf\u7de9\u885d\u5340"},sidebar:"docs",previous:{title:"\u8272\u5f69\u683c\u5f0f",permalink:"/4.25/zh-TW/docs/basic-concepts/color-formats"},next:{title:"\u5716\u5f62\u5f15\u64ce",permalink:"/4.25/zh-TW/docs/basic-concepts/graphics-engine"}},d={},h=[{value:"\u984f\u8272",id:"colors",level:2},{value:"Display",id:"display",level:2},{value:"\u5f71\u50cf\u7de9\u885d\u7684\u4f4d\u7f6e",id:"location-of-framebuffer",level:2},{value:"\u5167\u90e8RAM",id:"internal-ram",level:3},{value:"\u5916\u90e8RAM",id:"external-ram",level:3},{value:"Display with GRAM",id:"display-with-gram",level:3},{value:"\u5132\u5b58\u7a7a\u9593\u6d88\u8017",id:"memory-consumption",level:2},{value:"Framebuffer Strategies",id:"framebuffer-strategies",level:2},{value:"Displays without GRAM",id:"display-without-gram-table",level:4},{value:"Displays with GRAM",id:"display-with-gram-table",level:4},{value:"Tearing",id:"tearing",level:3},{value:"UI Performance",id:"framebuffer-strategy-performance",level:3},{value:"Glossary",id:"framebuffer-strategies-glossary",level:3},{value:"Displays without GRAM",id:"display-without-gram-framebuffer-strategies",level:3},{value:"Double Buffering Strategy",id:"display-without-gram-double-buffering",level:4},{value:"Single Buffering Strategy",id:"display-without-gram-single-buffering",level:4},{value:"Partial Buffering Strategy",id:"display-without-gram-partial-buffering",level:4},{value:"Displays with GRAM",id:"display-with-gram-framebuffer-strategies",level:3},{value:"Double Buffering Strategy",id:"display-with-gram-double-buffering",level:4},{value:"Single Buffering Strategy",id:"display-with-gram-single-buffering",level:4},{value:"Partial Buffering Strategy",id:"display-with-gram-partial-buffering",level:4},{value:"Getting Started with Framebuffer Strategies",id:"framebuffer-strategy-getting-started",level:3},{value:"Displays with GRAM",id:"displays-with-gram-getting-started",level:4},{value:"Displays without GRAM",id:"displays-without-gram-getting-started",level:4}],c={toc:h},g="wrapper";function y(e){var{components:t}=e,r=f(e,["components"]);return(0,a.kt)(g,s({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"\u5f71\u50cf\u7de9\u885d\u662f\u8a18\u61b6\u9ad4\u7684\u4e00\u90e8\u5206\uff0c\u5716\u5f62\u5f15\u64ce\u901a\u904e\u66f4\u65b0\u5f71\u50cf\u7de9\u885d\uff0c\u5c07\u8981\u5728\u986f\u793a\u5668\u4e0a\u986f\u793a\u7684\u4e0b\u4e00\u5e45\u5716\u50cf\u5305\u542b\u9032\u4f86\u3002"),(0,a.kt)("p",null,"\u5e40\u7de9\u885d\u662fRAM\u7684\u4e00\u500b\u9023\u7e8c\u90e8\u5206\uff0c\u5177\u6709\u6307\u5b9a\u5927\u5c0f\u3002"),(0,a.kt)(n.Z,{imageSource:"/img/basic-concepts/framebuffer-contiguous-memory.svg",noShadow:"true",mdxType:"Figure"},"\u5f71\u50cf\u7de9\u885d\u8a18\u61b6\u9ad4"),(0,a.kt)("p",null,"\u5f71\u50cf\u7de9\u885d\u5177\u6709\u76f8\u61c9\u7684\u5bec\u5ea6\u548c\u9ad8\u5ea6\u3002 \u56e0\u6b64\uff0c\u6211\u5011\u901a\u5e38\u5c07\u5f71\u50cf\u7de9\u885d\u8996\u70ba\u8a18\u61b6\u9ad4\u7684\u4e00\u500b\u4e8c\u7dad\u90e8\u5206\uff0c\u53ef\u901a\u904ex\u3001y\u5ea7\u6a19\u6aa2\u7d22\u3002"),(0,a.kt)(n.Z,{imageSource:"/img/basic-concepts/framebuffer-2d-memory.svg",noShadow:"true",mdxType:"Figure"},"\u4e8c\u7dad\u5f71\u50cf\u7de9\u885d\u8a18\u61b6\u9ad4"),(0,a.kt)("p",null,"\u5f71\u50cf\u7de9\u885d\u5177\u6709\u76f8\u61c9\u7684\u8272\u5f69\u683c\u5f0f\u3002 \u5f71\u50cf\u7de9\u885d\u4e2d\u7684\u6bcf\u500b\u689d\u76ee\u90fd\u662f\u8a72\u8272\u5f69\u683c\u5f0f\u4e0b\u7684\u8272\u5f69\u3002 \u6211\u5011\u5c07\u5f71\u50cf\u7de9\u885d\u4e2d\u7684\u6bcf\u4e00\u500b\u9019\u6a23\u7684\u689d\u76ee\u7a31\u70ba\u50cf\u7d20\u3002"),(0,a.kt)("p",null,"\u901a\u904e\u8a08\u7b97\u5f71\u50cf\u7de9\u885d\u4e2d\u50cf\u7d20\u7684\u5132\u5b58\u4f4d\u5740\u548c\u66f4\u65b0\u5b58\u5132\u7684\u8272\u5f69\uff0c\u53ef\u4ee5\u66f4\u65b0\u5f71\u50cf\u7de9\u885d\u4e2d\u4f4d\u7f6e x,y \u8655\u7684\u50cf\u7d20\u8272\u5f69\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-cpp"}),"uint32_t pixelAddress = x + y * WIDTH;\nframebuffer[ pixelAddress ] = newColor;\n")),(0,a.kt)("p",null,"\u540c\u6a23\u5730\uff0c\u6211\u5011\u53ef\u4ee5\u7372\u53d6\u5f71\u50cf\u7de9\u885d\u4e2d\u50cf\u7d20\u7684\u8272\u5f69\u4e26\u7528\u5728\u8a08\u7b97\u4e2d\u3002 \u4f8b\u5982\uff0c\u6697\u5316\u5f71\u50cf\u7de9\u885d\u4e2d\u50cf\u7d20\u7684\u8272\u5f69\uff08\u5047\u8a2d\u6709",(0,a.kt)("inlineCode",{parentName:"p"},"\u6697\u5316"),"\u51fd\u6578\u53ef\u7528\uff09\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",s({parentName:"pre"},{className:"language-cpp"}),"uint32_t pixelAddress = x + y * WIDTH;\nframebuffer[ pixelAddress ] = darken( framebuffer[ pixelAddress ] );\n")),(0,a.kt)("p",null,"\u5c0d\u65bc\u5f71\u50cf\u7de9\u885d\u8a18\u61b6\u9ad4\uff0c\u901a\u5e38\u4e0d\u6703\u5982\u524d\u6587\u6240\u8ff0\u9010\u4e00\u8b80\u5beb\u50cf\u7d20\uff0c\u800c\u662f\u5229\u7528\u7cfb\u7d71\u7684\u5e95\u5c64\u786c\u9ad4\u529f\u80fd\uff08\u5982Chrom-ART DMA\uff09\u9032\u884c\u8b80\u5beb\u3002"),(0,a.kt)("h2",s({},{id:"colors"}),"\u984f\u8272"),(0,a.kt)("p",null,"\u5728TouchGFX\u4e2d\uff0c\u5f71\u50cf\u7de9\u885d\u7684\u50cf\u7d20\u8272\u5f69\u683c\u5f0f\u53ef\u4ee5\u662f\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"\u7070\u5ea6"),"1\u30012\u62164\u4f4d\u5143\u6bcf\u50cf\u7d20\uff08bpp\uff09\u7070\u5ea6\uff0c\u6216\u8005"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"\u9ad8\u6216\u771f\u5f69"),"16\u300124\u621632 bpp\u8272\u5f69")),(0,a.kt)("p",null,"\u6bcf\u500b\u50cf\u7d20\u4f7f\u7528\u7684\u4f4d\u5143\u6578\u8d8a\u591a\uff0c\u5f71\u50cf\u7de9\u885d\u80fd\u5920\u5448\u73fe\u7684\u984f\u8272\u5c31\u8d8a\u6e05\u6670\uff0c\u6b64\u5916\uff0c\u6bcf\u500b\u50cf\u7d20\u4f7f\u7528\u7684\u4f4d\u5143\u6578\u8d8a\u591a\uff0c\u5f71\u50cf\u7de9\u885d\u6d88\u8017\u7684\u5132\u5b58\u7a7a\u9593\u5c31\u8d8a\u591a\u3002"),(0,a.kt)("h2",s({},{id:"display"}),"Display"),(0,a.kt)("p",null,"\u5f71\u50cf\u7de9\u885d\u7684\u5167\u5bb9\u6700\u7d42\u6703\u88ab\u50b3\u8f38\u4e26\u986f\u793a\u5728\u986f\u793a\u5668\u4e0a\u3002 \u56e0\u6b64\uff0c\u5f71\u50cf\u7de9\u885d\u8207\u986f\u793a\u5668\u7684\u50cf\u7d20\u5bec\u5ea6\u548c\u9ad8\u5ea6\u76f8\u540c\u662f\u5341\u5206\u5e38\u898b\u7684\u3002"),(0,a.kt)(n.Z,{imageSource:"/img/basic-concepts/display-and-framebuffer.svg",noShadow:"true",mdxType:"Figure"},"24 bpp\u5f71\u50cf\u7de9\u885d\u5167\u5bb9\u548c\u986f\u793a\u5668\u986f\u793a\u5167\u5bb9"),(0,a.kt)(i.Z,{mdxType:"FurtherReading"},"\u53c3\u898b\u95dc\u65bc",(0,a.kt)(l.Z,{to:"../development/hardware-selection/hardware-components/hardware-selection-display",mdxType:"Link"},"\u986f\u793a\u5668\u6280\u8853"),"\u7684\u90e8\u5206\u77ad\u89e3\u4e0d\u540c\u986f\u793a\u5668\u985e\u578b\u3002"),(0,a.kt)("h2",s({},{id:"location-of-framebuffer"}),"\u5f71\u50cf\u7de9\u885d\u7684\u4f4d\u7f6e"),(0,a.kt)("p",null,"\u4e0b\u9762\u662f\u4e00\u500b\u57fa\u65bc\u5fae\u63a7\u5236\u5668\u7684\u7e6a\u5716\u7cfb\u7d71\u7684\u7c21\u5716\u3002"),(0,a.kt)(n.Z,{imageSource:"/img/basic-concepts/simplified-graphics-system.webp",noShadow:!0,width:"400",mdxType:"Figure"},"\u7e6a\u5716\u7cfb\u7d71\u7c21\u5716"),(0,a.kt)("p",null,"\u5f71\u50cf\u7de9\u885d\u53ef\u4ee5\u4f4d\u65bcMCU\u6216\u5916\u90e8RAM\u4e2d\u3002"),(0,a.kt)(n.Z,{imageSource:"/img/basic-concepts/framebuffer-placement.webp",noShadow:"true",width:"600",mdxType:"Figure"},"\u5f71\u50cf\u7de9\u885d\u7684\u53ef\u80fd\u4f4d\u7f6e"),(0,a.kt)("p",null,"\u6bcf\u500b\u53ef\u80fd\u4f4d\u7f6e\u90fd\u5177\u6709\u6f5b\u5728\u7684\u512a\u52e2\u548c\u4e0d\u8db3\u3002"),(0,a.kt)("h3",s({},{id:"internal-ram"}),"\u5167\u90e8RAM"),(0,a.kt)("p",null,"\u5982\u679c\u5f71\u50cf\u7de9\u885d\u4f4d\u65bcMCU\u5167\u90e8\u7684RAM\u4e2d\uff0c\u5c0d\u5f71\u50cf\u7de9\u885d\u7684\u8b80\u548c\u5beb\u5b58\u53d6\u6703\u76e1\u53ef\u80fd\u5feb\u5730\u5b8c\u6210\u3002 \u9019\u610f\u5473\u8457TouchGFX\u61c9\u7528\u7684\u904b\u884c\u6703\u76e1\u53ef\u80fd\u5e73\u7a69\u3002 \u53cd\u904e\u4f86\uff0c\u5167\u90e8RAM\u662f\u5341\u5206\u7a00\u5c11\u7684\u8cc7\u6e90\uff0c\u88ab\u7cfb\u7d71\u7684\u8a31\u591a\u5143\u4ef6\u4f7f\u7528\uff0c\u56e0\u6b64\uff0c\u5f71\u50cf\u7de9\u885d\u5927\u91cf\u4f54\u7528\u5167\u90e8RAM\u4e5f\u4e0d\u53ef\u884c\u3002"),(0,a.kt)("p",null,"\u5982\u679c\u53ef\u884c\uff0c\u7531\u65bc\u7121\u9700\u984d\u5916\u7684RAM\uff0c\u5728\u5167\u90e8RAM\u4e2d\u63d0\u4f9b\u5f71\u50cf\u7de9\u885d\u53ef\u4ee5\u964d\u4f4e\u7cfb\u7d71\u7684\u7e3d\u9ad4\u6210\u672c\u3002"),(0,a.kt)("h3",s({},{id:"external-ram"}),"\u5916\u90e8RAM"),(0,a.kt)("p",null,"\u5982\u679c\u7cfb\u7d71\u6709\u5916\u90e8RAM\uff0c\u53ef\u4ee5\u9078\u64c7\u5728\u5916\u90e8RAM\u800c\u4e0d\u662f\u5167\u90e8RAM\u4e2d\u63d0\u4f9b\u5f71\u50cf\u7de9\u885d\u3002 \u5c0d\u5916\u90e8RAM\u7684\u8b80\u548c\u5beb\u5b58\u53d6\u901a\u5e38\u6703\u6bd4\u5167\u90e8RAM\u6162\uff0c\u4f46\u5916\u90e8RAM\u7684\u7a7a\u9593\u91cf\u901a\u5e38\u5927\u5f97\u591a\u3002 \u56e0\u6b64\uff0c\u6709\u6642\u5019\u9019\u662f\u552f\u4e00\u53ef\u884c\u7684\u89e3\u6c7a\u65b9\u6848\u3002"),(0,a.kt)("p",null,"MCU\u53ef\u80fd\u5177\u6709\u4e00\u4e9b\u529f\u80fd\uff08\u5982\u5feb\u53d6\u8a18\u61b6\u9ad4\uff09\uff0c\u53ef\u52a0\u5feb\u5916\u90e8RAM\u7684\u5b58\u53d6\u901f\u5ea6\u3002 \u53c3\u898b\u95dc\u65bc",(0,a.kt)("a",s({parentName:"p"},{href:"../development/hardware-selection/hardware-components/hardware-selection-mcu"}),"MCU"),"\u7684\u90e8\u5206\u77ad\u89e3\u8a73\u7d30\u8cc7\u8a0a\u3002"),(0,a.kt)("h3",s({},{id:"display-with-gram"}),"Display with GRAM"),(0,a.kt)("p",null,"Depending on the type of display in the system there might be memory embedded on the display (often called GRAM). \u6b64\u8a18\u61b6\u9ad4\u5132\u5b58\u986f\u793a\u5668\u201c\u5be6\u969b\u201d\u50cf\u7d20\u7684\u5167\u5bb9\u3002 \u986f\u793a\u5668\u4e2d\u6709\u6b64\u50cf\u7d20\u8a18\u61b6\u9ad4\uff0c\u610f\u5473\u8457\u5728\u986f\u793a\u5668\u4ecd\u6d3b\u52d5\u6642\uff0cMCU\u53ef\u80fd\u8655\u65bc\u7a7a\u9592\u72c0\u614b\u3002"),(0,a.kt)("p",null,"\u7531\u65bc\u986f\u793a\u5668\u8a18\u61b6\u9ad4\u4e26\u975e\u8a18\u61b6\u9ad4\u6620\u5c04\uff0c\u65e2\u4e0d\u6253\u7b97\u4e5f\u4e0d\u9069\u5408\u7528\u65bc\u50cf\u7d20\u7684\u96a8\u6a5f\u8b80\u53d6\u6216\u5beb\u5165\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u5728\u986f\u793a\u5668RAM\u4e2d\u63d0\u4f9bTouchGFX\u5f71\u50cf\u7de9\u885d\u3002 \u76f8\u53cd\uff0cTouchGFX\u5c07\u5f71\u50cf\u7de9\u885d\u7f6e\u65bc\u5167\u90e8\u6216\u5916\u90e8RAM\u4e2d\uff0c\u4e26\u5728\u9069\u7576\u7684\u6642\u5019\u5c07\u5176\u50b3\u8f38\u5230\u986f\u793a\u5668RAM\u3002"),(0,a.kt)("h2",s({},{id:"memory-consumption"}),"\u5132\u5b58\u7a7a\u9593\u6d88\u8017"),(0,a.kt)("p",null,"\u5f71\u50cf\u7de9\u885d\u4e2d\u7684\u8272\u5f69\u6578\u91cf\u548c\u50cf\u7d20\u6578\u91cf\u6c7a\u5b9a\u4e86\u5f71\u50cf\u7de9\u885d\u6d88\u8017\u7684\u5132\u5b58\u7a7a\u9593\u3002"),(0,a.kt)("p",null,"\u5f71\u50cf\u7de9\u885d\u4f7f\u7528\u7684\u5132\u5b58\u7a7a\u9593\u901a\u5e38\u70ba \u5bec ",(0,a.kt)("em",{parentName:"p"}," \u9ad8 ")," \u4ee5\u4f4d\u5143\u6578\u8a08\u7684\u8272\u6df1 / 8 \u4f4d\u5143\u7d44\u6578\u3002"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",s({parentName:"tr"},{align:"right"}),"\u89e3\u6790\u5ea6\uff08\u50cf\u7d20\uff09"),(0,a.kt)("th",s({parentName:"tr"},{align:"right"}),"\u8272\u5f69\uff08bpp\uff09"),(0,a.kt)("th",s({parentName:"tr"},{align:"right"}),"\u8a08\u7b97"),(0,a.kt)("th",s({parentName:"tr"},{align:"right"}),"\u6d88\u8017\u7684\u5132\u5b58\u7a7a\u9593\uff08\u4f4d\u5143\u7d44\uff09"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",s({parentName:"tr"},{align:"right"}),"800x480"),(0,a.kt)("td",s({parentName:"tr"},{align:"right"}),"16 bpp"),(0,a.kt)("td",s({parentName:"tr"},{align:"right"}),"800 ",(0,a.kt)("em",{parentName:"td"}," 480 ")," 16 / 8"),(0,a.kt)("td",s({parentName:"tr"},{align:"right"}),"768,000 B")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",s({parentName:"tr"},{align:"right"}),"480x272"),(0,a.kt)("td",s({parentName:"tr"},{align:"right"}),"24 bpp"),(0,a.kt)("td",s({parentName:"tr"},{align:"right"}),"480 ",(0,a.kt)("em",{parentName:"td"}," 272 ")," 24 / 8"),(0,a.kt)("td",s({parentName:"tr"},{align:"right"}),"391,680 B")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",s({parentName:"tr"},{align:"right"}),"100x100"),(0,a.kt)("td",s({parentName:"tr"},{align:"right"}),"8 bpp"),(0,a.kt)("td",s({parentName:"tr"},{align:"right"}),"100 ",(0,a.kt)("em",{parentName:"td"}," 100 "),"  8 / 8"),(0,a.kt)("td",s({parentName:"tr"},{align:"right"}),"10,000 B")))),(0,a.kt)("p",null,"\u7576\u5177\u6709\u4e00\u500b\u4ee5\u4e0a\u7684\u5f71\u50cf\u7de9\u885d\u6642\uff0c\u6d88\u8017\u7684\u5b58\u5132\u7a7a\u9593\u76f8\u5c0d\u5730\u8f03\u5927\u3002 \u4f8b\u5982\uff0c\u7576\u4f7f\u7528\u96d9\u91cd\u5f71\u50cf\u7de9\u885d\u65b9\u6848\u6642\uff0c\u4f7f\u7528\u5169\u500b\u5f71\u50cf\u7de9\u885d\u6703\u6d88\u8017\u5169\u500d\u7684\u5132\u5b58\u7a7a\u9593\u3002"),(0,a.kt)("p",null,"\u7576\u5f71\u50cf\u7de9\u885d\u4e0d\u8db3\u4e00\u500b\u6642\uff0c\u7531\u61c9\u7528\u660e\u78ba\u5730\u5206\u914d\u548c\u63a7\u5236\u5b58\u5132\u7a7a\u9593\u7684\u91cf\u3002 \u56e0\u6b64\uff0c\u5b58\u5132\u7a7a\u9593\u7684\u6d88\u8017\u91cf\u662f\u5b8c\u5168\u53ef\u5b9a\u5236\u7684\uff0c\u4f46\u61c9\u6ce8\u610f\u7684\u662f\uff0c\u4f7f\u7528\u91cf\u904e\u5c11\u6703\u5f71\u97ff\u6574\u9ad4\u5716\u5f62\u6027\u80fd\u3002"),(0,a.kt)("h2",s({},{id:"framebuffer-strategies"}),"Framebuffer Strategies"),(0,a.kt)("p",null,"Framebuffer strategy is a core feature, that enables you to make the most optimal match between TouchGFX rendering and your existing hardware (MCU, RAM and Display). In case you are selecting new hardware, it is recommended to get familiar with the available framebuffer strategies in relation to your use case. The right choice can help optimize your hardware cost, i.e. assist you in selecting the minimum required hardware in terms of the amount of RAM for framebuffer(s) and the suitable display interface."),(0,a.kt)("p",null,"A framebuffer strategy defines how much RAM is used for framebuffers and controls how TouchGFX renders to the RAM. The strategy must match the available RAM and the type of display in the system. TouchGFX offers three different strategies, applicable on display systems with and without GRAM. Below is an overview of the strategies, highlighting their advantages and drawbacks in relation to display systems."),(0,a.kt)("h4",s({},{id:"display-without-gram-table"}),"Displays without GRAM"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",s({parentName:"tr"},{align:null}),"Strategy"),(0,a.kt)("th",s({parentName:"tr"},{align:null}),"Advantages"),(0,a.kt)("th",s({parentName:"tr"},{align:null}),"Drawbacks"),(0,a.kt)("th",s({parentName:"tr"},{align:null}),"Use Cases"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",s({parentName:"tr"},{align:null}),"Double"),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"No risk of tearing, optimal time for rendering"),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"RAM for 2 framebuffers"),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"High performance UIs")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",s({parentName:"tr"},{align:null}),"Single"),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"Only RAM for 1 framebuffer"),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"Risk of tearing, suboptimal time for rendering"),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"High - Moderate performance UIs")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",s({parentName:"tr"},{align:null}),"Partial"),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"Only RAM for less than a framebuffer"),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"Higher risk of tearing, higher CPU load"),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"Moderate - Low performance UIs")))),(0,a.kt)("h4",s({},{id:"display-with-gram-table"}),"Displays with GRAM"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",s({parentName:"tr"},{align:null}),"Strategy"),(0,a.kt)("th",s({parentName:"tr"},{align:null}),"Advantages"),(0,a.kt)("th",s({parentName:"tr"},{align:null}),"Drawbacks"),(0,a.kt)("th",s({parentName:"tr"},{align:null}),"Use Cases"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",s({parentName:"tr"},{align:null}),"Double"),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"No risk of tearing, optimal time for rendering"),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"RAM for 2 framebuffers"),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"High performance UIs")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",s({parentName:"tr"},{align:null}),"Single"),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"Only RAM for 1 framebuffer, no risk of tearing"),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"Suboptimal time for rendering"),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"High - Moderate performance UIs")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",s({parentName:"tr"},{align:null}),"Partial"),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"Only RAM for less than a framebuffer"),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"Risk of tearing"),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"Moderate - Low performance UIs")))),(0,a.kt)("h3",s({},{id:"tearing"}),"Tearing"),(0,a.kt)("p",null,"Tearing is a visual artifact on the display where pixel data from two frames are shown in one screen draw, e.g. the screen has half of an old frame and half of a current one, with a clean horizontal split across (the tear). The location of the tear varies according to timing, it usually jumps all over the place, which can be distracting."),(0,a.kt)("h3",s({},{id:"framebuffer-strategy-performance"}),"UI Performance"),(0,a.kt)("p",null,"In the general ",(0,a.kt)("a",s({parentName:"p"},{href:"performance"}),"Performance")," article, you will be introduced to aspects of UI performance, which covers how the individual UI components and there structure impacts performance. In the context of framebuffer strategy we think of:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"High performance, as UIs that uses multiple complex UI components/animations, e.g. Texture Mappers, SVGs, screen transitions"),(0,a.kt)("li",{parentName:"ul"},"Moderate performance, as UIs that uses few complex UI components/animations"),(0,a.kt)("li",{parentName:"ul"},"Low performance, as UIs that uses no complex UI components/animations")),(0,a.kt)(o.Z,{mdxType:"Note"},"The above examples are not definitive. Keep in mind that the UI performance depend on your hardware and UI design."),(0,a.kt)("h3",s({},{id:"framebuffer-strategies-glossary"}),"Glossary"),(0,a.kt)("p",null,"The following terms are used to describe the different framebuffer strategies."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Display Controller (DC)")," - The hardware that reads pixels from memory. Is continuously reading the memory containing pixels. Sometimes referred to as the ",(0,a.kt)("em",{parentName:"li"},"scanline"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Display Transfer (DT)")," - The hardware responsible of transferring pixels from framebuffer memory to GRAM. Is only initiated by the MCU when required. Sometimes referred to as the ",(0,a.kt)("em",{parentName:"li"},"transferline"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Framebuffer Write (W)")," - The rendering of pixels to the framebuffer.")),(0,a.kt)("h3",s({},{id:"display-without-gram-framebuffer-strategies"}),"Displays without GRAM"),(0,a.kt)("p",null,"The following demonstrates the working concept of framebuffer strategies on displays without GRAM. Common for all strategies are the use of a Display Controller which continuously reads pixel data directly from a framebuffer."),(0,a.kt)("h4",s({},{id:"display-without-gram-double-buffering"}),"Double Buffering Strategy"),(0,a.kt)("p",null,"Having two framebuffers allows rendering of the next frame into one framebuffer while the Display Controller scans the other framebuffer. Render time of the next frame is unrestricted by the Display Controller. Swapping framebuffers is blocked until the next frame is ready, meaning no risk of tearing because the Display Controller just scans the current framebuffer once again. The framebuffers are swapped after the Display Controller has scanned the entire framebuffer and the rendering is complete."),(0,a.kt)(n.Z,{imageSource:"/img/basic-concepts/ltdc-double.png",noShadow:"true",width:"650",mdxType:"Figure"},"Double Buffering Strategy Concept"),(0,a.kt)("h4",s({},{id:"display-without-gram-single-buffering"}),"Single Buffering Strategy"),(0,a.kt)("p",null,"Having one framebuffer allows rendering of the next frame into the same framebuffer as the Display Controller scans from. Render time of the next frame is restricted by the Display Controller. The Display Controller scans continuously, so if writing to the framebuffer takes too long, the Display Controller will collide (catch up) with the writing area and tearing will occur. This is caused by rendering complex UI components."),(0,a.kt)(n.Z,{imageSource:"/img/basic-concepts/ltdc-single.png",noShadow:"true",width:"400",mdxType:"Figure"},"Single Buffering Strategy Concept"),(0,a.kt)("h4",s({},{id:"display-without-gram-partial-buffering"}),"Partial Buffering Strategy"),(0,a.kt)("p",null,"A single partial framebuffer block is used to emulate a full size framebuffer through a Memory Management Unit (MMU). Therefore this strategy is also known as ",(0,a.kt)("em",{parentName:"p"},"Emulated Framebuffer Strategy"),"."),(0,a.kt)("p",null,"The partial block acts as a sliding window moving down through the emulated framebuffer, with the phase and speed of the Display Controller."),(0,a.kt)("p",null,"Having a partial framebuffer block only allows rendering of a small portion of the next frame, because the block is reused multiple times to render the current frame. The reuse of the partial block results in a large number of small rendering operations, which result in higher CPU load. Render time of the next frame is restricted by the Display Controller and the partial block size. The Display Controller scans continuously, so if writing to the partial framebuffer block takes too long for any given region of the emulated framebuffer, the Display Controller will collide (catch up) with the writing area and tearing will occur. This is caused by rendering complex UI components. Compared to the Single Buffering Strategy the risk of tearing is higher because the working area of the Display Controller and framebuffer rendering is much smaller."),(0,a.kt)(n.Z,{imageSource:"/img/basic-concepts/ltdc-partial.png",noShadow:"true",width:"700",mdxType:"Figure"},"Partial Buffering Strategy Concept"),(0,a.kt)(o.Z,{mdxType:"Note"},"This strategy is only available on MCUs with a ",(0,a.kt)(l.Z,{to:"https://www.st.com/resource/en/application_note/an5051-graphic-memory-optimization-with-stm32-chromgrc-stmicroelectronics.pdf",mdxType:"Link"},"STM32 Chrom-GRC (GFXMMU)")),(0,a.kt)("h3",s({},{id:"display-with-gram-framebuffer-strategies"}),"Displays with GRAM"),(0,a.kt)("p",null,"The following demonstrates the working concept of framebuffer strategies on GRAM displays. Common for all strategies are the use of a Display Interface used for transferring pixel data from a framebuffer to the GRAM on the display."),(0,a.kt)("h4",s({},{id:"display-with-gram-double-buffering"}),"Double Buffering Strategy"),(0,a.kt)("p",null,"Having two framebuffers allows rendering of the next frame into one framebuffer while the pixels are transferred to GRAM from the other. Render time of the next frame is unrestricted by the Display Transfer. Display transfers are only initiated when the next frame is ready, meaning no risk of tearing because the Display Controller just scans what is already in GRAM. The framebuffers are swapped after the display transfer and the rendering is complete."),(0,a.kt)(n.Z,{imageSource:"/img/basic-concepts/gram-double.png",noShadow:"true",mdxType:"Figure"},"Double Buffering Strategy Concept"),(0,a.kt)("h4",s({},{id:"display-with-gram-single-buffering"}),"Single Buffering Strategy"),(0,a.kt)("p",null,"Having one framebuffer allows rendering of the next frame into the same framebuffer where pixels are transferred to GRAM. Render time of the next frame is restricted by the Display Transfer bandwidth. Display transfers are only initiated when the next frame is ready, meaning no risk of tearing because the Display Controller just scans what is already in GRAM. Rendering of the next frame cannot complete before the corresponding area to update has been transferred to GRAM."),(0,a.kt)(n.Z,{imageSource:"/img/basic-concepts/gram-single.png",noShadow:"true",width:"700",mdxType:"Figure"},"Single Buffering Strategy Concept"),(0,a.kt)("h4",s({},{id:"display-with-gram-partial-buffering"}),"Partial Buffering Strategy"),(0,a.kt)("p",null,"One or more partial framebuffer blocks are used to emulate a full size framebuffer."),(0,a.kt)("p",null,"The partial blocks are reused to render all parts of the current frame that needs to be updated. When a block is rendered it can be transferred to GRAM and used for subsequent rendering."),(0,a.kt)("p",null,"To minimize the risk of tearing we strive to have the largest margin between GRAM being updated by the Display Transfer and the Display Controller scanline. This is done be having the transferline behind the scanline, which means that we can only render the current frame and not begin rendering the next frame. Render time of the current frame depends on the number of partial blocks defined and the time it takes to transfer each block. This means that we are allowed to render a block that is ahead of the Display Controller scanline if a block is available. If rendering and transferring of all the dirty areas of the current frame takes longer than the Display Controller its scanline can wrap around and catch the transferline, resulting in tearing. This is caused by rendering complex UI components and/or transferring too many pixels."),(0,a.kt)(n.Z,{imageSource:"/img/basic-concepts/gram-partial.png",noShadow:"true",width:"700",mdxType:"Figure"},"Partial Buffering Strategy Concept"),(0,a.kt)("h3",s({},{id:"framebuffer-strategy-getting-started"}),"Getting Started with Framebuffer Strategies"),(0,a.kt)("p",null,"In the following section we will show common hardware setups and point to scenarios on how to use framebuffer strategies on various hardware setups."),(0,a.kt)(i.Z,{mdxType:"FurtherReading"},"See article ",(0,a.kt)(l.Z,{to:"../development/touchgfx-hal-development/generator-how-to/touchgfx-al-configuration/display#buffering-strategies",mdxType:"Link"},"Buffering Strategies & Location")," on how to configure a framebuffer strategy through the TouchGFX Generator."),(0,a.kt)("h4",s({},{id:"displays-with-gram-getting-started"}),"Displays with GRAM"),(0,a.kt)("p",null,"This display type has a dedicated RAM buffer with the same size as the display, i.e. a full size framebuffer."),(0,a.kt)(n.Z,{imageSource:"/img/basic-concepts/display-with-gram.webp",noShadow:"true",width:"700",mdxType:"Figure"},"Display with GRAM"),(0,a.kt)("p",null,"The interfaces for this type of display are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"FMC"),(0,a.kt)("li",{parentName:"ul"},"SPI"),(0,a.kt)("li",{parentName:"ul"},"DSI (Command Mode)")),(0,a.kt)("p",null,"Scenarios demonstrating the use of these interfaces can be found here:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",s({parentName:"li"},{href:"../development/touchgfx-hal-development/scenarios/scenarios-fmc"}),"FMC Display Interface")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",s({parentName:"li"},{href:"../development/touchgfx-hal-development/scenarios/scenarios-spi"}),"SPI Display Interface")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",s({parentName:"li"},{href:"../development/touchgfx-hal-development/scenarios/scenarios-dsi-command-mode"}),"DSI (Command Mode) Display Interface"))),(0,a.kt)("h4",s({},{id:"displays-without-gram-getting-started"}),"Displays without GRAM"),(0,a.kt)("p",null,"This display type doesn't have a dedicated RAM buffer."),(0,a.kt)(n.Z,{imageSource:"/img/basic-concepts/display-without-gram.webp",noShadow:"true",width:"600",mdxType:"Figure"},"Display without GRAM"),(0,a.kt)("p",null,"The interfaces for this type of display are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"LTDC"),(0,a.kt)("li",{parentName:"ul"},"DSI (Video Mode)")),(0,a.kt)("p",null,"Scenarios demonstrating the use of these interfaces can be found here:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",s({parentName:"li"},{href:"../development/touchgfx-hal-development/scenarios/scenarios-ltdc-parallel-rgb"}),"LTDC Display Interface")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",s({parentName:"li"},{href:"../development/touchgfx-hal-development/scenarios/scenarios-dsi-video-mode"}),"MIPI-DSI Video Mode"))),(0,a.kt)(i.Z,{mdxType:"FurtherReading"},"The ",(0,a.kt)(l.Z,{to:"https://www.st.com/content/ccc/resource/technical/document/application_note/group0/25/ca/f9/b4/ae/fc/4e/1e/DM00287603/files/DM00287603.pdf/jcr:content/translations/en.DM00287603.pdf",mdxType:"Link"},"STM32 LTDC")," display controller document has further details on framebuffers."))}y.isMDXComponent=!0}}]);